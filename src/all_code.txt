package site.balpyo.ai.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.api.HttpBody;
import com.google.api.HttpBodyOrBuilder;

import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.*;
import site.balpyo.ai.dto.AIGenerateRequest;
import site.balpyo.ai.dto.AudioDTO;
import site.balpyo.ai.dto.PollyDTO;
import site.balpyo.auth.dto.request.LoginRequest;
import site.balpyo.auth.dto.response.JwtResponse;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.repository.UserRepository;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.script.dto.ScriptRequest;
import site.balpyo.script.dto.ScriptResponse;

import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class AIGenerateServiceTest {
    private static String jwtToken;
    private static String userVerifyUid;

    private static Long scriptId;
    @Autowired
    private TestRestTemplate restTemplate;



    @BeforeAll
    public static void testSignup(@Autowired TestRestTemplate restTemplate,
                                  @Autowired UserRepository userRepository) {

        LoginRequest request = new LoginRequest();
        request.setEmail("testuser@example.com");
        request.setPassword("password");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity<LoginRequest> entity = new HttpEntity<>(request, headers);

        ResponseEntity<String> response = restTemplate.postForEntity("/auth/signin", entity, String.class);
        System.out.println("response--------------------");
        System.out.println("response : " + response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JwtResponse jwtResponse = objectMapper.readValue(response.getBody(), JwtResponse.class);
            jwtToken = jwtResponse.getToken();
            Optional<User> optionalUser = userRepository.findByEmail("testuser@example.com");
            userVerifyUid = optionalUser.get().getVerifyCode();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    @Test
    @Order(1)
    public void testJwtExist() {
        System.out.println("jwtToken :" + jwtToken);
        assertNotNull(jwtToken);
    }

    @Test
    @Order(2)
    public void testVerifyCodeExist() {
        assertNotNull(userVerifyUid);
    }

    @Test
    @Order(3)
    public void testVerify() {

        HttpHeaders headers = new HttpHeaders();
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        ResponseEntity<CommonResponse> response = restTemplate.exchange("/api/auth/verify?uid="+userVerifyUid, HttpMethod.GET, entity, CommonResponse.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());

    }

    @Test
    @Order(4)
    public void testSaveScript() {
        ScriptRequest request = new ScriptRequest();
        request.setTitle("Test Script");
        request.setScript("This is a test script.");
        request.setGptId("gpt-test-id");
        request.setSecTime(120);
        request.setVoiceFilePath("path/to/voice/file");
        request.setUseAi(false);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + jwtToken);

        HttpEntity<ScriptRequest> entity = new HttpEntity<>(request, headers);
        ResponseEntity<CommonResponse> response = restTemplate.postForEntity("/every/manage/script", entity, CommonResponse.class);
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Object result = response.getBody().getResult();
            ScriptResponse scriptResponse = objectMapper.convertValue(result, ScriptResponse.class);
            scriptId = scriptResponse.getScriptId();
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println(response.getBody()+"response.getBody()");
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }
    @Test
    @Order(5)
    public void generateAi() {
        AIGenerateRequest request = new AIGenerateRequest();
        request.setTopic("발표준비");
        request.setTest(true);
        request.setKeywords("발표에서 최적화하는 방법");
        request.setSecTime(100);
        request.setScriptId(scriptId);
        request.setBalpyoAPIKey("1234");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + jwtToken);

        HttpEntity<AIGenerateRequest> entity = new HttpEntity<>(request, headers);

        ResponseEntity<CommonResponse> response = restTemplate.exchange("/user/ai/script", HttpMethod.POST, entity, CommonResponse.class);
        System.out.println(response.toString());
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());

    }


    @Test
    @Order(6)
    public void testGetAllScripts() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jwtToken);
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        ResponseEntity<CommonResponse> beforeResponse = restTemplate.exchange("/every/manage/script/all", HttpMethod.GET, entity, CommonResponse.class);
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            List<ScriptResponse> beforeScriptResponses = objectMapper.convertValue(
                    beforeResponse.getBody().getResult(), new TypeReference<List<ScriptResponse>>() {}
            );

            Integer beforeSize = beforeScriptResponses.size();
            System.out.println("Before size: " + beforeSize);

            testSaveScript();

            ResponseEntity<CommonResponse> afterResponse = restTemplate.exchange("/every/manage/script/all", HttpMethod.GET, entity, CommonResponse.class);
            List<ScriptResponse> afterScriptResponses = objectMapper.convertValue(
                    afterResponse.getBody().getResult(), new TypeReference<List<ScriptResponse>>() {}
            );
            Integer afterSize = afterScriptResponses.size();
            System.out.println("After size: " + afterSize);

            assertEquals(1, afterSize - beforeSize);

        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception occurred: " + e.getMessage());
        }

    }


    @Test
    @Order(7)
    public void testGetScriptDetail() {

        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jwtToken);
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        ResponseEntity<CommonResponse> response = restTemplate.exchange("/every/manage/script/detail/" + scriptId, HttpMethod.GET, entity, CommonResponse.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }

    @Test
    @Order(8)
    public void testPatchScriptDetail() {

        testSaveScript();

        ScriptRequest request = new ScriptRequest();

        String randomString = UUID.randomUUID().toString();
        request.setTitle(randomString + "title");
        request.setScript(randomString + "script");
        request.setGptId(randomString + "gptId");
        request.setUid(randomString + "uid");
        request.setSecTime(9999);
        request.setVoiceFilePath(randomString + "path");

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + jwtToken);
        HttpEntity<ScriptRequest> entity = new HttpEntity<>(request, headers);

        ResponseEntity<CommonResponse> patchResponse = restTemplate.exchange("/every/manage/script/detail/" + scriptId, HttpMethod.PATCH, entity, CommonResponse.class);

        assertEquals(HttpStatus.OK, patchResponse.getStatusCode());
        assertNotNull(patchResponse.getBody());
        assertEquals("0000", patchResponse.getBody().getCode());
        assertEquals("success", patchResponse.getBody().getMessage());

        HttpEntity<Void> entity2 = new HttpEntity<>(headers);

        ResponseEntity<CommonResponse> getResponse = restTemplate.exchange("/every/manage/script/detail/" + scriptId, HttpMethod.GET, entity2, CommonResponse.class);

        assertEquals(HttpStatus.OK, getResponse.getStatusCode());
        assertNotNull(getResponse.getBody());
        assertEquals("0000", getResponse.getBody().getCode());
        assertEquals("success", getResponse.getBody().getMessage());
        assertNotNull(getResponse.getBody().getResult());

        ScriptResponse scriptResponse = null;
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Object result = getResponse.getBody().getResult();
            scriptResponse = objectMapper.convertValue(result, ScriptResponse.class);
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception occurred while parsing the response body");
        }

        assertNotNull(scriptResponse);
        assertEquals(scriptResponse.getTitle(), randomString + "title");
        assertEquals(scriptResponse.getScript(), randomString + "script");


        assertEquals(scriptResponse.getSecTime(), 9999);
        assertEquals(scriptResponse.getVoiceFilePath(), randomString + "path");

    }


    @Test
    @Order(9)
    public void testDeleteScriptDetail() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jwtToken);
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        ResponseEntity<CommonResponse> response = restTemplate.exchange("/every/manage/script/detail/" + scriptId, HttpMethod.DELETE, entity, CommonResponse.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
    }


    @Test
    @Order(10)
    public void testGenerateAudio() {
        HttpHeaders headers = new HttpHeaders();
        headers.set("Authorization", "Bearer " + jwtToken);
        PollyDTO request = new PollyDTO();
        request.setText("NOW TESTING!");
        request.setBalpyoAPIKey("1234");
        HttpEntity<PollyDTO> entity = new HttpEntity<>(request,headers);

        ResponseEntity<AudioDTO> response = restTemplate.exchange("/polly/uploadSpeech", HttpMethod.POST, entity, AudioDTO.class);

        String profileUrl = response.getBody().getProfileUrl();

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(profileUrl);
    }


}package site.balpyo;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class BalpyoHelperApplicationTests {

	@Test
	void contextLoads() {
	}

}
package site.balpyo.test.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import site.balpyo.test.entity.TestEntity;

public interface TestRepository extends JpaRepository<TestEntity, Integer> {
}

package site.balpyo.test.entity;


import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.springframework.data.annotation.CreatedDate;


import java.time.LocalDateTime;

@Data
@Builder
@NoArgsConstructor
@Entity
@Table(name = "test")
public class TestEntity {

    @Id
    @GeneratedValue
    private Long testId;

    private String testContent;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @Builder
    public TestEntity(Long testId, String testContent, LocalDateTime createdAt) {
        this.testId = testId;
        this.testContent = testContent;
        this.createdAt = createdAt;
    }
}package site.balpyo.test.controller;


import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.test.entity.TestEntity;
import site.balpyo.test.repository.TestRepository;
import java.time.LocalTime;


@RestController
@RequiredArgsConstructor
@RequestMapping("/test")
public class BasicController {
    private final TestRepository testRepository;
    @GetMapping("/status")
    public String welcome(){
        return "발표몇분 발표짱즈 빠이팅" + LocalTime.now();
    }

    @GetMapping("/db-insert")
    public Object dbInsert() {
            TestEntity testEntity = TestEntity.builder()
                    .testContent("testing")
                    .build();
            testRepository.save(testEntity);
            return CommonResponse.success(testEntity);
    }

    @GetMapping("/db-read")
    public Object dbRead() {
            return testRepository.findAll();
    }

}
package site.balpyo.auth.dto.response;

public class MessageResponse {
    private String message;

    public MessageResponse(String message) {
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
package site.balpyo.auth.dto.response;

import lombok.*;

import java.util.List;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class JwtResponse {
    private String token;
    private String type = "Bearer";
    private Long id;
    private String username;
    private String email;
    private List<String> roles;

    public JwtResponse(String token, Long id, String username, String email, List<String> roles) {
        this.token = token;
        this.id = id;
        this.username = username;
        this.email = email;
        this.roles = roles;
    }


}
package site.balpyo.auth.dto.request;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;

import java.util.Set;

@Getter
@Setter
public class SignupRequest {

    private String username;

    @NotBlank(message = "이메일은 공백일 수 없습니다")
    private String email;

    @NotBlank(message = "비밀번호는 공백일 수 없습니다")
    private String password;


}
package site.balpyo.auth.dto.request;

import jakarta.validation.constraints.NotBlank;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class LoginRequest {
//    @NotBlank
    private String email;

//    @NotBlank
    private String password;

}
package site.balpyo.auth.repository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import site.balpyo.auth.entity.ERole;
import site.balpyo.auth.entity.Role;

@Component
public class RoleDataLoader implements CommandLineRunner {

    @Autowired
    RoleRepository roleRepository;

    @Override
    public void run(String... args) throws Exception {
        if (roleRepository.findByName(ERole.ROLE_UNVERIFIED_USER).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_UNVERIFIED_USER));
        }

        if (roleRepository.findByName(ERole.ROLE_USER).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_USER));
        }
        if (roleRepository.findByName(ERole.ROLE_ADMIN).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_ADMIN));
        }
        if (roleRepository.findByName(ERole.ROLE_MODERATOR).isEmpty()) {
            roleRepository.save(new Role(ERole.ROLE_MODERATOR));
        }
    }
}
package site.balpyo.auth.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import site.balpyo.auth.entity.ERole;
import site.balpyo.auth.entity.Role;

import java.util.Optional;

@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {
    Optional<Role> findByName(ERole name);
}
package site.balpyo.auth.repository;


import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import site.balpyo.auth.entity.User;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);

    Boolean existsByUsername(String username);

    Boolean existsByEmail(String email);

    Optional<User> findByEmail(String email);

    Optional<User> findByVerifyCode(String verifyCode);
}
package site.balpyo.auth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import site.balpyo.auth.security.jwt.AuthEntryPointJwt;
import site.balpyo.auth.security.jwt.AuthTokenFilter;
import site.balpyo.auth.service.UserDetailsServiceImpl;

import java.util.List;

@Configuration
@EnableMethodSecurity
// (securedEnabled = true,
// jsr250Enabled = true,
// prePostEnabled = true) // by default
public class WebSecurityConfig { // extends WebSecurityConfigurerAdapter {
    @Autowired
    UserDetailsServiceImpl userDetailsService;

    @Autowired
    private AuthEntryPointJwt unauthorizedHandler;

    @Bean
    public AuthTokenFilter authenticationJwtTokenFilter() {
        return new AuthTokenFilter();
    }

//  @Override
//  public void configure(AuthenticationManagerBuilder authenticationManagerBuilder) throws Exception {
//    authenticationManagerBuilder.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
//  }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();

        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());

        return authProvider;
    }

//  @Bean
//  @Override
//  public AuthenticationManager authenticationManagerBean() throws Exception {
//    return super.authenticationManagerBean();
//  }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }



//  @Override
//  protected void configure(HttpSecurity http) throws Exception {
//    http.cors().and().csrf().disable()
//      .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()
//      .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
//      .authorizeRequests().antMatchers("/api/auth/**").permitAll()
//      .antMatchers("*").permitAll()
//      .anyRequest().authenticated();
//
//    http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);
//  }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();

        config.setAllowCredentials(true);
        config.setAllowedOriginPatterns(List.of("*"));
        config.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"));
        config.setAllowedHeaders(List.of("*"));
        config.setExposedHeaders(List.of("*"));

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }



    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
                .cors(Customizer.withDefaults())
                .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authorizeHttpRequests(auth ->
                        auth.anyRequest().permitAll() // 모든 요청에 대해 접근 허용
                );

        http.authenticationProvider(authenticationProvider());

        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}
package site.balpyo.auth;

import org.springframework.stereotype.Component;


@Component
public class EmailConfig {

    private static final String BALPYO_TITLE = "[발표몇분] 회원가입 인증코드";

    private static final String SUPPORT_EMAIL = "balpyohelper@gmail.com";

    public String getBalpyoTitle() {
        return BALPYO_TITLE;
    }

    public String getBalpyoBody(String link) {
        return new StringBuilder()
                .append("안녕하세요,\n")
                .append("발표몇분입니다.\n")
                .append("\n")
                .append("아래 버튼으로 이메일 인증을 해주세요.\n")
                .append(link).append("\n")
                .append("\n")
                .append("감사합니다,\n")
                .append("발표몇분 드림\n")
                .append("\n")
                .append("클릭으로 인증이 되지 않는다면,\n")
                .append("위의 긴 주소를 인터넷 브라우저 주소 창에 붙여 넣어 보세요!\n")
                .append("계속 인증에 실패한다면 ").append(SUPPORT_EMAIL).append("을 통해 저희에게 연락 부탁 드립니다!")
                .toString();
    }
}
package site.balpyo.auth.security.jwt;

import io.jsonwebtoken.*;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;
import site.balpyo.auth.service.UserDetailsImpl;

import java.security.Key;
import java.util.Date;

@Component
public class JwtUtils {
    @Value("${secrets.jwtSecret}")
    private String jwtSecret;

    @Value("${jwtExpirationMs}")
    private int jwtExpirationMs;

    public String generateJwtToken(Authentication authentication) {

        UserDetailsImpl userPrincipal = (UserDetailsImpl) authentication.getPrincipal();

        System.out.println(authentication);
        return Jwts.builder()
                .setSubject((userPrincipal.getEmail()))
                .setIssuedAt(new Date())
                .setExpiration(new Date((new Date()).getTime() + jwtExpirationMs))
                .signWith(key(), SignatureAlgorithm.HS256)
                .compact();
    }

    private Key key() {
        return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret));
    }

    public String getUserNameFromJwtToken(String token) {
        return Jwts.parserBuilder().setSigningKey(key()).build()
                .parseClaimsJws(token).getBody().getSubject();
    }

    public boolean validateJwtToken(String authToken) {
        try {
            Jwts.parserBuilder().setSigningKey(key()).build().parse(authToken);
            return true;
        } catch (MalformedJwtException e) {
            System.out.println("Invalid JWT token: " + e.getMessage());
        } catch (ExpiredJwtException e) {
            System.out.println("JWT token is expired: " + e.getMessage());
        } catch (UnsupportedJwtException e) {
            System.out.println("JWT token is unsupported: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            System.out.println("JWT claims string is empty: " + e.getMessage());
        }

        return false;
    }
}
package site.balpyo.auth.security.jwt;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

@Component
public class AuthEntryPointJwt implements AuthenticationEntryPoint {



    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)
            throws IOException, ServletException {
        System.out.println("Unauthorized error: {}"+ authException.getMessage());

        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);

        final Map<String, Object> body = new HashMap<>();
        body.put("status", HttpServletResponse.SC_UNAUTHORIZED);
        body.put("error", "Unauthorized");
        body.put("message", authException.getMessage());
        body.put("path", request.getServletPath());

        final ObjectMapper mapper = new ObjectMapper();
        mapper.writeValue(response.getOutputStream(), body);
    }

}
package site.balpyo.auth.security.jwt;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import site.balpyo.auth.service.UserDetailsServiceImpl;

import java.io.IOException;

public class AuthTokenFilter extends OncePerRequestFilter {
    @Autowired
    private JwtUtils jwtUtils;

    @Autowired
    private UserDetailsServiceImpl userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String jwt = parseJwt(request);
            if (jwt != null && jwtUtils.validateJwtToken(jwt)) {
                String email = jwtUtils.getUserNameFromJwtToken(jwt);

                UserDetails userDetails = userDetailsService.loadUserByUsername(email);
                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(
                                userDetails,
                                null,
                                userDetails.getAuthorities());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        } catch (Exception e) {
            System.out.println("Cannot set user authentication: " + e.getMessage());
            e.printStackTrace();
        }

        filterChain.doFilter(request, response);
    }

    private String parseJwt(HttpServletRequest request) {
        String headerAuth = request.getHeader("Authorization");

        if (StringUtils.hasText(headerAuth) && headerAuth.startsWith("Bearer ")) {
            return headerAuth.substring(7);
        }

        return null;
    }
}
package site.balpyo.auth.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import site.balpyo.ai.entity.AIGenerateLogEntity;

import java.util.*;

@Entity
@Table(name = "users",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "username"),
                @UniqueConstraint(columnNames = "email")
        })
@Getter
@Setter
@ToString
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotBlank
    @Size(max = 20)
    private String username;

    @NotBlank
    @Size(max = 50)
    @Email
    private String email;

    @NotBlank
    @Size(max = 120)
    private String password;

    private Integer coin;

    private String verifyCode;

    @Enumerated(EnumType.STRING)
    private LoginType loginType;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "user_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();




    @PrePersist
    protected void onCreate() {
        this.verifyCode = UUID.randomUUID().toString();
    }

    public User() {}

    public User(String username, String email, String password) {
        this.username = username;
        this.email = email;
        this.password = password;
    }
}
package site.balpyo.auth.entity;

public enum ERole {

    ROLE_UNVERIFIED_USER,
    ROLE_USER,
    ROLE_MODERATOR,
    ROLE_ADMIN

}
package site.balpyo.auth.entity;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Table(name = "roles")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Role {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Enumerated(EnumType.STRING)
    @Column(length = 20)
    private ERole name;

    public Role(ERole name) {
        this.name = name;
    }


}
package site.balpyo.auth.entity;

public enum LoginType {
    LOCAL, // 자체로그인
    KAKAO,
    GOOGLE
}
package site.balpyo.auth.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.repository.UserRepository;

import java.util.Optional;

@Controller
public class AuthWebController {

    @Autowired
    private UserRepository userRepository;

    @GetMapping("/verify")
    public String verifyUser(@RequestParam(value = "uid", required = false)String uid , Model model) {
        model.addAttribute("uid", uid);
        return "verify";
    }

}
package site.balpyo.auth.controller;

import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import site.balpyo.auth.EmailConfig;
import site.balpyo.auth.dto.request.LoginRequest;
import site.balpyo.auth.dto.request.SignupRequest;
import site.balpyo.auth.dto.response.JwtResponse;
import site.balpyo.auth.dto.response.MessageResponse;
import site.balpyo.auth.entity.ERole;
import site.balpyo.auth.entity.LoginType;
import site.balpyo.auth.entity.Role;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.repository.RoleRepository;
import site.balpyo.auth.repository.UserRepository;
import site.balpyo.auth.security.jwt.JwtUtils;
import site.balpyo.auth.service.EmailService;
import site.balpyo.auth.service.RandomAdjectiveAnimalGenerator;
import site.balpyo.auth.service.UserDetailsImpl;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import java.util.stream.Collectors;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/auth")
public class AuthController {
    @Autowired
    AuthenticationManager authenticationManager;

    @Autowired
    UserRepository userRepository;
    @Autowired
    EmailService emailService;

    @Autowired
    RoleRepository roleRepository;

    @Autowired
    PasswordEncoder encoder;

    @Autowired
    JwtUtils jwtUtils;

    @Autowired
    EmailConfig emailConfig;

    @PostMapping("/signin")
    public ResponseEntity<?> authenticateUser(@Valid @RequestBody LoginRequest loginRequest) {

        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.getEmail(), loginRequest.getPassword()));

        SecurityContextHolder.getContext().setAuthentication(authentication);
        String jwt = jwtUtils.generateJwtToken(authentication);

        UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
        List<String> roles = userDetails.getAuthorities().stream()
                .map(item -> item.getAuthority())
                .collect(Collectors.toList());

        return ResponseEntity.ok(new JwtResponse(jwt,
                userDetails.getId(),
                userDetails.getUsername(),
                userDetails.getEmail(),
                roles));
    }

    @PostMapping("/signup")
    public ResponseEntity<?> registerUser(@RequestBody SignupRequest signUpRequest) {

        if (userRepository.existsByUsername(signUpRequest.getUsername())) {
            return ResponseEntity
                    .badRequest()
                    .body(new MessageResponse("Error: Username is already taken!"));
        }

        if (userRepository.existsByEmail(signUpRequest.getEmail())) {
            return ResponseEntity
                    .badRequest()
                    .body(new MessageResponse("Error: Email is already in use!"));
        }

        //새로운 유저 생성
        User user = new User(signUpRequest.getUsername(),
                signUpRequest.getEmail(),
                encoder.encode(signUpRequest.getPassword()));


        Set<Role> roles = new HashSet<>();

            Role userRole = roleRepository.findByName(ERole.ROLE_UNVERIFIED_USER)
                    .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
            roles.add(userRole);

        user.setRoles(roles);
        user.setCoin(3); // TODO : 최초 가입시 제공받는 코인 갯수 차후 확장성있게 수정가능하도록 구현할 예쩡
        user.setLoginType(LoginType.LOCAL);

        if(signUpRequest.getUsername()==null){
            user.setUsername(new RandomAdjectiveAnimalGenerator().generateNickname());
        }else{
            user.setUsername(signUpRequest.getUsername());
        }

        System.out.println("user :"+user.toString());
        User insertedUser = userRepository.save(user);

        // // 서버의 IP 주소를 가져옵니다.
        // String serverIpAddress = "";
        // try {
        //     InetAddress inetAddress = InetAddress.getLocalHost();
        //     serverIpAddress = inetAddress.getHostAddress();
        // } catch (UnknownHostException e) {
        //     e.printStackTrace();
        // }

        String verificationUrl = "https://balpyo.site" + "/api/verify?uid=" + insertedUser.getVerifyCode(); // 포트 번호를 적절히 수정하십시오.

        emailService.sendEmail(signUpRequest.getEmail(), emailConfig.getBalpyoTitle(), emailConfig.getBalpyoBody(verificationUrl));

        return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
    }

    @GetMapping("/verify")
    public ResponseEntity<CommonResponse> checkUserVerify(@RequestParam("uid") String uid) {
        Optional<User> optionalUser = userRepository.findByVerifyCode(uid);
        if(optionalUser.isPresent()){
            Set<Role> roles = new HashSet<>();
            Role userRole = roleRepository.findByName(ERole.ROLE_USER)
                    .orElseThrow(() -> new RuntimeException("Error: Role is not found."));
            roles.add(userRole);

            User user = optionalUser.get();
            user.setRoles(roles);

            userRepository.save(user);

            return CommonResponse.success("");
        }else{
            return CommonResponse.error(ErrorEnum.GUEST_NOT_FOUND);
        }
    }







}package site.balpyo.auth.controller;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/test")
public class TestController {
    @GetMapping("/all")
    public String allAccess() {
        return "Public Content.";
    }

    @GetMapping("/user")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public String userAccess() {
        return "User Content.";
    }

    @GetMapping("/mod")
    @PreAuthorize("hasRole('MODERATOR')")
    public String moderatorAccess() {
        return "Moderator Board.";
    }

    @GetMapping("/admin")
    @PreAuthorize("hasRole('ADMIN')")
    public String adminAccess() {
        return "Admin Board.";
    }
}package site.balpyo.auth.service;

import org.springframework.stereotype.Component;

import java.util.Random;
import java.util.UUID;

@Component
public class RandomAdjectiveAnimalGenerator {

    public String generateNickname() {
        Random random = new Random();


        String[] adjectives = {"즐거운", "재밌는", "행복한", "멋진", "신나는", "활기찬", "기쁜", "사랑스러운",
                "상쾌한", "평화로운", "용감한", "빛나는", "친절한", "매력적인", "긍정적인",
                "화려한", "따뜻한", "기운찬", "쾌활한", "유쾌한", "희망찬", "사려깊은", "배려심 깊은",
                "풍요로운", "충만한", "평온한", "달콤한", "기분 좋은", "친숙한", "자유로운"};


        String[] animals = {"곰", "사자", "토끼", "코끼리", "호랑이", "여우", "늑대", "고양이", "개",
                "기린", "원숭이", "다람쥐", "판다", "코알라", "악어", "펭귄", "부엉이", "수달",
                "고래", "돌고래", "참새", "공작", "두루미", "타조", "앵무새", "오리", "까마귀",
                "문어", "해마", "상어", "고등어", "송어", "도마뱀", "개구리", "두더지", "사슴"};


        String[] colors = {"빨간", "주황색", "노란", "초록색", "파란", "남색", "보라색", "분홍색",
                "갈색", "검은색", "흰색", "회색", "연두색", "하늘색", "자주색", "금색", "은색",
                "청록색", "밤색", "연보라색", "연한 파란색", "아이보리색", "크림색", "카키색",
                "올리브색", "베이지색", "다홍색", "라벤더색", "연두빛 노란색", "암청색"};


        String uuid = UUID.randomUUID().toString().replaceAll("[^0-9]", "");
        String randomString = uuid.substring(0, 6);


        String randomAdjective = adjectives[random.nextInt(adjectives.length)];
        String randomColor = colors[random.nextInt(colors.length)];
        String randomAnimal = animals[random.nextInt(animals.length)];


        String result = randomAdjective + randomColor  + randomAnimal + randomString;
        return result;
    }
}
package site.balpyo.auth.service;

import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.repository.UserRepository;
import site.balpyo.common.dto.CommonResponse;

import java.util.Optional;

@Service
public class AuthenticationService {

    private final UserRepository userRepository;

    public AuthenticationService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User authenticationToUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        if (authentication == null || !authentication.isAuthenticated()) {
            throw new IllegalArgumentException("No authenticated user found");
        }

        Object principal = authentication.getPrincipal();

        if (!(principal instanceof UserDetailsImpl)) {
            throw new IllegalArgumentException("Principal is not an instance of UserDetailsImpl");
        }

        UserDetailsImpl userDetails = (UserDetailsImpl) principal;
        Long userId = userDetails.getId();

        Optional<User> optionalUser = userRepository.findById(userId);
        if (optionalUser.isEmpty()) {
            throw new IllegalArgumentException("User not found with ID: " + userId);
        }

        return optionalUser.get();
    }

}
package site.balpyo.auth.service;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

@Service
public class EmailService {


    @Autowired
    private JavaMailSender mailSender;

    public void sendEmail(String to, String subject, String text) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(text);
        mailSender.send(message);
    }





}
package site.balpyo.auth.service;

import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.repository.UserRepository;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
    @Autowired
    UserRepository userRepository;

    @Override
    @Transactional
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        try {
            User user = userRepository.findByEmail(email)
                    .orElseThrow(() -> new UsernameNotFoundException("User Not Found with email: " + email));

            return UserDetailsImpl.build(user);
        } catch (UsernameNotFoundException e) {
            System.out.println("UsernameNotFoundException occurred while loading user by email: " + email);
            e.printStackTrace();
            throw e;
        } catch (Exception e) {
            System.out.println("Unexpected exception occurred while loading user by email: " + email);
            e.printStackTrace();
            throw new RuntimeException("Unexpected error occurred while loading user by email", e);
        }
    }


//    @Override
//    @Transactional
//    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
//        User user = userRepository.findByEmail(email)
//                .orElseThrow(() -> new UsernameNotFoundException("User Not Found with username: " + email));
//
//        return UserDetailsImpl.build(user);
//    }

}
package site.balpyo.auth.service;

import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.repository.UserRepository;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;



public class UserDetailsImpl implements UserDetails {

    private static final long serialVersionUID = 1L;

    private Long id;

    private String username;

    private String email;

    @JsonIgnore
    private String password;

    private Collection<? extends GrantedAuthority> authorities;

    public UserDetailsImpl(Long id, String username, String email, String password,
                           Collection<? extends GrantedAuthority> authorities) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
        this.authorities = authorities;
    }

    public static UserDetailsImpl build(User user) {
        List<GrantedAuthority> authorities = user.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority(role.getName().name()))
                .collect(Collectors.toList());

        return new UserDetailsImpl(
                user.getId(),
                user.getUsername(),
                user.getEmail(),
                user.getPassword(),
                authorities);
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }

    public Long getId() {
        return id;
    }

    public String getEmail() {
        return email;
    }

    @Override
    public String getPassword() {
        return password;
    }

    @Override
    public String getUsername() {
        return username;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        UserDetailsImpl user = (UserDetailsImpl) o;
        return Objects.equals(id, user.id);
    }
}
package site.balpyo.script.dto;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.HashMap;
import java.util.List;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class ScriptRequest {
    private String script;
    private String gptId;
    private String uid;
    private String title;
    private Integer secTime;
    private String voiceFilePath;
    private boolean useAi;
    private List<String> tag;
}
package site.balpyo.script.dto;

import lombok.*;
import site.balpyo.script.entity.Tag;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class ScriptResponse {

        private Long scriptId;
        private String script;
        private String gptId;
        private String uid;
        private String title;
        private Integer secTime;
        private String voiceFilePath;
        private boolean isGenerating;
        private boolean useAi;
        private Set<String> tag;

}
package site.balpyo.script.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import site.balpyo.auth.entity.ERole;
import site.balpyo.auth.entity.Role;
import site.balpyo.script.entity.ETag;
import site.balpyo.script.entity.ScriptEntity;
import site.balpyo.script.entity.Tag;

import java.util.List;
import java.util.Optional;

public interface TagRepository extends JpaRepository<Tag, Long> {
    Optional<Tag> findByTag(ETag tag);
}
package site.balpyo.script.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import site.balpyo.auth.entity.User;
import site.balpyo.script.entity.ScriptEntity;

import java.util.List;
import java.util.Optional;

public interface ScriptRepository extends JpaRepository<ScriptEntity, Long> {

    List<ScriptEntity> findAllByUserAndIsGeneratingIsFalse(User user);
    List<ScriptEntity> findAllByUserId(Long id);

    Optional<ScriptEntity> findByUserAndScriptId(User user,Long scriptId);

}
package site.balpyo.script.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import site.balpyo.ai.entity.AIGenerateLogEntity;
import site.balpyo.auth.entity.Role;
import site.balpyo.auth.entity.User;
import site.balpyo.voice.entity.VoiceEntity;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Getter
@Setter
@Entity
@Table(name = "script")
@Builder
@AllArgsConstructor
@NoArgsConstructor
@ToString
public class ScriptEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long scriptId;

    @Lob
    @Column(columnDefinition = "LONGTEXT")
    private String script;

    private String title;

    private Integer secTime;

    private String voiceFilePath;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @Column(nullable = false)
    private Boolean isGenerating;

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
            name = "tags_scripts",
            joinColumns = @JoinColumn(name = "script_id"),
            inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    private Set<Tag> tags = new HashSet<>();

    @OneToOne(mappedBy = "scriptEntity", cascade = CascadeType.ALL, orphanRemoval = true)
    private AIGenerateLogEntity aiGenerateLog;

    @OneToMany(mappedBy = "scriptEntity", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<VoiceEntity> voiceEntities = new ArrayList<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    private User user;
}
package site.balpyo.script.entity;

import jakarta.persistence.*;
import lombok.*;
import org.checkerframework.common.aliasing.qual.Unique;
import site.balpyo.auth.entity.ERole;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Getter
@Setter
@Entity
@Table(name = "tags")
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Tag {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Enumerated(EnumType.STRING)
    @Column(length = 20, unique = true)
    private ETag tag;

//    @ManyToMany(mappedBy = "tags")
//    private Set<ScriptEntity> scripts = new HashSet<>();

    public Tag(ETag tag) {
        this.tag = tag;
    }

}
package site.balpyo.script.entity;

public enum ETag {
    NOTE,
    TIME,
    SCRIPT,
    FLOW
}
package site.balpyo.script.controller;


import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;
import site.balpyo.common.util.CommonUtils;
import site.balpyo.script.dto.ScriptRequest;
import site.balpyo.script.service.ScriptService;
import site.balpyo.script.service.ScriptServiceDeprecated;

@RestController
@CrossOrigin
@RequiredArgsConstructor
@RequestMapping("/every/manage")
public class EveryScriptController {

    private final ScriptServiceDeprecated scriptServiceDeprecated;
    private final ScriptService scriptService;


    @PostMapping("/script")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CommonResponse> saveScript(@RequestBody ScriptRequest scriptRequest,
                                                     @RequestHeader(value = "UID", required = false) String uid){

        return scriptService.saveEmptyScript(scriptRequest);
    }

    @GetMapping("/script/all")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CommonResponse> getAllScript(@RequestHeader(value = "UID", required = false) String uid) {

       return scriptService.getAllScript(uid);
    }



    @GetMapping("/script/detail/{scriptId}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CommonResponse> getDetailScript(@RequestHeader(value = "UID", required = false) String uid,
    @PathVariable Long scriptId) {
        return scriptServiceDeprecated.getDetailScript(scriptId);
    }

    @PatchMapping("/script/detail/{scriptId}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CommonResponse> patchDetailScript(@RequestBody ScriptRequest scriptRequest,
                                                     @RequestHeader(value = "UID", required = false) String uid,
                                                            @PathVariable Long scriptId){

       return scriptServiceDeprecated.patchScript(scriptRequest,scriptId);
    }

    @DeleteMapping("/script/detail/{scriptId}")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CommonResponse> deleteDetailScript(@PathVariable Long scriptId){
        return scriptServiceDeprecated.deleteScript(scriptId);
    }

}
package site.balpyo.script.service;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import site.balpyo.ai.dto.AIGenerateRequest;
import site.balpyo.ai.entity.AIGenerateLogEntity;
import site.balpyo.ai.entity.GPTInfoEntity;
import site.balpyo.ai.repository.AIGenerateLogRepository;
import site.balpyo.ai.repository.GPTInfoRepository;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.service.AuthenticationService;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;
import site.balpyo.guest.entity.GuestEntity;
import site.balpyo.guest.repository.GuestRepository;
import site.balpyo.script.dto.ScriptRequest;
import site.balpyo.script.dto.ScriptResponse;
import site.balpyo.script.entity.ETag;
import site.balpyo.script.entity.ScriptEntity;
import site.balpyo.script.entity.Tag;
import site.balpyo.script.repository.ScriptRepository;
import site.balpyo.script.repository.TagRepository;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ScriptService {

    private final ScriptRepository scriptRepository;
    private final GuestRepository guestRepository;
    private final AIGenerateLogRepository aiGenerateLogRepository;
    private final GPTInfoRepository gptInfoRepository;
    private final AuthenticationService authenticationService;
    private final TagRepository tagRepository;

    public ResponseEntity<CommonResponse> saveEmptyScript(ScriptRequest scriptRequest) {

        User user = authenticationService.authenticationToUser();

        Set<Tag> tags = new HashSet<>();

        List<String> reqTags = scriptRequest.getTag() != null ? scriptRequest.getTag() : new ArrayList<>();
        for (String tag : reqTags) {
            ETag eTag = ETag.valueOf(tag);
            switch (eTag) {
                case NOTE:
                    tags.add(tagRepository.findByTag(ETag.NOTE).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.NOTE)));
                    break;
                case TIME:
                    tags.add(tagRepository.findByTag(ETag.TIME).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.TIME)));
                    break;
                case SCRIPT:
                    tags.add(tagRepository.findByTag(ETag.SCRIPT).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.SCRIPT)));
                    break;
                case FLOW:
                    tags.add(tagRepository.findByTag(ETag.FLOW).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.FLOW)));
                    break;
                default:
                    throw new IllegalArgumentException("Unknown tag: " + tag);
            }
        }



        ScriptEntity scriptEntity = ScriptEntity.builder()
                .title(scriptRequest.getTitle())
                .script(scriptRequest.getScript())
                .secTime(scriptRequest.getSecTime())
                .user(user)
                .isGenerating(scriptRequest.isUseAi())
                .tags(tags)
                .build();


        ScriptEntity insertedScriptEntity = scriptRepository.save(scriptEntity);


        ScriptResponse scriptResponse = ScriptResponse.builder()
                .scriptId(insertedScriptEntity.getScriptId())
                .isGenerating(insertedScriptEntity.getIsGenerating())
                .tag(insertedScriptEntity.getTags().stream()
                        .map(tag -> tag.getTag().toString())
                        .collect(Collectors.toSet()))
                .build();

        System.out.println(insertedScriptEntity.getTags().toString());

        return CommonResponse.success(scriptResponse);
    }

    public ResponseEntity<CommonResponse> getAllScript(String uid) {
        User user = authenticationService.authenticationToUser();

        List<ScriptEntity> scriptEntities = scriptRepository.findAllByUserAndIsGeneratingIsFalse(user);


        List<ScriptResponse> scriptResponses = new ArrayList<>();



        for(ScriptEntity scriptEntity: scriptEntities){

            System.out.println("TAGS : "+scriptEntity.getTags());
            ScriptResponse scriptResponse = ScriptResponse.builder()
                    .scriptId(scriptEntity.getScriptId())
                    .uid(uid)
                    .title(scriptEntity.getTitle())
                    .secTime(scriptEntity.getSecTime())
                    .voiceFilePath(scriptEntity.getVoiceFilePath())
                    .isGenerating(scriptEntity.getIsGenerating())
                    .script(scriptEntity.getScript())
                    .tag(scriptEntity.getTags().stream()
                            .map(tag -> tag.getTag().toString())
                            .collect(Collectors.toSet())
                    )
                    .build();

            scriptResponses.add(scriptResponse);
        }

        return CommonResponse.success(scriptResponses);

    }


    public ResponseEntity<CommonResponse> patchScript(ScriptRequest scriptRequest,Long scriptId) {
        User user = authenticationService.authenticationToUser();



        Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user, scriptId);

        if(optionalScriptEntity.isEmpty())return CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND);

        ScriptEntity scriptEntity = optionalScriptEntity.get();

        Set<Tag> tags = new HashSet<>();

        for (String tag : scriptRequest.getTag()) {
            ETag eTag = ETag.valueOf(tag);
            switch (eTag) {
                case NOTE:
                    tags.add(tagRepository.findByTag(ETag.NOTE).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.NOTE)));
                    break;
                case TIME:
                    tags.add(tagRepository.findByTag(ETag.TIME).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.TIME)));
                    break;
                case SCRIPT:
                    tags.add(tagRepository.findByTag(ETag.SCRIPT).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.SCRIPT)));
                    break;
                case FLOW:
                    tags.add(tagRepository.findByTag(ETag.FLOW).orElseThrow(() -> new IllegalArgumentException("Tag not found: " + ETag.FLOW)));
                    break;
                default:
                    throw new IllegalArgumentException("Unknown tag: " + tag);
            }
        }
        scriptEntity.setScript(scriptRequest.getScript());
        scriptEntity.setTitle(scriptRequest.getTitle());
        scriptEntity.setSecTime(scriptRequest.getSecTime());

        Set<Tag> existedtags = scriptEntity.getTags();

        for(Tag tag : existedtags){
            tags.add(tag);
        }

        scriptEntity.setTags(tags);


        if (scriptRequest.getVoiceFilePath() != null && !scriptRequest.getVoiceFilePath().isEmpty()) {
            scriptEntity.setVoiceFilePath(scriptRequest.getVoiceFilePath());
        }

        scriptRepository.save(scriptEntity);

        return CommonResponse.success("");


    }


    public ResponseEntity<CommonResponse> deleteScript(String uid, Long scriptId) {

        User user = authenticationService.authenticationToUser();

        Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user, scriptId);

        if(optionalScriptEntity.isEmpty())return CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND);

        ScriptEntity scriptEntity = optionalScriptEntity.get();

        scriptRepository.delete(scriptEntity);

        return CommonResponse.success("");

    }
}package site.balpyo.script.service;


import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import site.balpyo.ai.entity.AIGenerateLogEntity;
import site.balpyo.ai.entity.GPTInfoEntity;
import site.balpyo.ai.repository.AIGenerateLogRepository;
import site.balpyo.ai.repository.GPTInfoRepository;
import site.balpyo.auth.entity.User;
import site.balpyo.auth.service.AuthenticationService;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;
import site.balpyo.guest.entity.GuestEntity;
import site.balpyo.guest.repository.GuestRepository;
import site.balpyo.script.dto.ScriptRequest;
import site.balpyo.script.dto.ScriptResponse;
import site.balpyo.script.entity.ScriptEntity;
import site.balpyo.script.repository.ScriptRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ScriptServiceDeprecated {

    private final ScriptRepository scriptRepository;
    private final GuestRepository guestRepository;
    private final AIGenerateLogRepository aiGenerateLogRepository;
    private final GPTInfoRepository gptInfoRepository;

    private final AuthenticationService authenticationService;


    public ResponseEntity<CommonResponse> saveScript(ScriptRequest scriptRequest) {

        GuestEntity guestEntity = null;
        User user = authenticationService.authenticationToUser();

        GPTInfoEntity gptInfoEntity = null;
        if (scriptRequest.getGptId() != null) {
            gptInfoEntity = gptInfoRepository.findById(scriptRequest.getGptId()).orElse(null);
        }

        AIGenerateLogEntity aiGenerateLogEntity = null;
        if (gptInfoEntity != null) {
            Optional<AIGenerateLogEntity> aiGenerateLogEntityOptional = aiGenerateLogRepository.findByGptInfoEntity(gptInfoEntity);
            aiGenerateLogEntity = aiGenerateLogEntityOptional.orElse(null);
            System.out.println(aiGenerateLogEntity.getTopic());
        }

        ScriptEntity scriptEntity = ScriptEntity.builder()
                .title(scriptRequest.getTitle())
                .script(scriptRequest.getScript())
                .secTime(scriptRequest.getSecTime())
                .user(user)
                .aiGenerateLog(aiGenerateLogEntity)
                .voiceFilePath(scriptRequest.getVoiceFilePath())
                .build();


        ScriptEntity insertedScript = scriptRepository.save(scriptEntity);


        return CommonResponse.success(insertedScript);
    }
/*
    public ResponseEntity<CommonResponse> getAllScript(String uid) {
        Optional<GuestEntity> guestEntity = guestRepository.findById(uid);

        if(guestEntity.isEmpty())return CommonResponse.error(ErrorEnum.GUEST_NOT_FOUND);
        List<ScriptResponse> scriptResponses = new ArrayList<>();
        if(guestEntity.get().getScriptEntities().isEmpty())return CommonResponse.success(scriptResponses);

        List<ScriptEntity> scriptEntities = guestEntity.get().getScriptEntities();


        for(ScriptEntity scriptEntity: scriptEntities){
              ScriptResponse scriptResponse = ScriptResponse.builder()
                .scriptId(scriptEntity.getScript_id())
                .uid(uid)
                .title(scriptEntity.getTitle())
                .secTime(scriptEntity.getSecTime())
                      .voiceFilePath(scriptEntity.getVoiceFilePath())
                      .isGenerating(scriptEntity.getIsGenerating())
                .build();

        scriptResponses.add(scriptResponse);
    }

        return CommonResponse.success(scriptResponses);

    }
    */


    public ResponseEntity<CommonResponse> getDetailScript(Long scriptId) {

        User user = authenticationService.authenticationToUser();

        Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user,scriptId);

        if(optionalScriptEntity.isEmpty())return CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND);

        ScriptEntity scriptEntity = optionalScriptEntity.get();

        ScriptResponse scriptResponse = ScriptResponse
                .builder()
                .scriptId(scriptEntity.getScriptId())
                .secTime(scriptEntity.getSecTime())
                .title(scriptEntity.getTitle())
                .script(scriptEntity.getScript())
                .voiceFilePath(scriptEntity.getVoiceFilePath())
                .build();

        return CommonResponse.success(scriptResponse);


    }
    public ResponseEntity<CommonResponse> patchScript(ScriptRequest scriptRequest,Long scriptId) {

        User user = authenticationService.authenticationToUser();

        Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user, scriptId);

        if(optionalScriptEntity.isEmpty())return CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND);

        ScriptEntity scriptEntity = optionalScriptEntity.get();

        scriptEntity.setScript(scriptRequest.getScript());
        scriptEntity.setTitle(scriptRequest.getTitle());
        scriptEntity.setSecTime(scriptRequest.getSecTime());


        if (scriptRequest.getVoiceFilePath() != null && !scriptRequest.getVoiceFilePath().isEmpty()) {
            scriptEntity.setVoiceFilePath(scriptRequest.getVoiceFilePath());
        }

        scriptRepository.save(scriptEntity);

        return CommonResponse.success("");

    }


    public ResponseEntity<CommonResponse> deleteScript(Long scriptId) {
        User user = authenticationService.authenticationToUser();

        Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user, scriptId);

        if(optionalScriptEntity.isEmpty())return CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND);

        ScriptEntity scriptEntity = optionalScriptEntity.get();

        scriptRepository.delete(scriptEntity);

        return CommonResponse.success("");

    }


}
package site.balpyo.script.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import site.balpyo.script.entity.ETag;
import site.balpyo.script.entity.Tag;
import site.balpyo.script.repository.TagRepository;

@Component
public class TagDataLoader implements CommandLineRunner {

    @Autowired
    TagRepository tagRepository;

    @Override
    public void run(String... args) throws Exception {
        for (ETag eTag : ETag.values()) {
            if (tagRepository.findByTag(eTag).isEmpty()) {
                tagRepository.save(new Tag(eTag));
            }
        }
    }
}
package site.balpyo.common.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class UploadResponseDTO {
    private String url;
    private String objectPath;
}
package site.balpyo.common.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor
public enum ErrorEnum {

    //6000 - Sript 계열 에러
    SCRIPT_NOT_FOUND("6001", "저장된 스크립트가 없습니다."),
    SCRIPT_DETAIL_NOT_FOUND("6002", "해당 조건의 스크립트가 없습니다."),
    //7000 - Guest 계열에러
    GUEST_NOT_FOUND("7001", "존재하지 않는 게스트입니다."),

    //8000 - GPT 계열에러
    GPT_GENERATION_ERROR("8001", "GPT 스크립트 생성 실패."),
    GPT_API_KEY_MISSING("8002", "GPT API 키 누락."),

    //9000 - client 계열 에러
    BALPYO_API_KEY_ERROR("9000", "BALPYO_API_KEY를 다시 확인해주세요."),
    BALPYO_UID_KEY_MISSING("9001", "헤더의 UID를 다시 확인해주세요."),

    // 5000 - 내부 서버 에러
    INTERNAL_SERVER_ERROR("5000", "내부 서버 오류가 발생했습니다."),
    FCM_SEND_ERROR("5001", "FCM 전송에 실패했습니다.");

    private final String code;
    private final String message;

}
package site.balpyo.common.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;


@Data
@AllArgsConstructor
public class CommonResponse {

    private String code;
    private String message;
    private Object result;

    /**
     * 성공 응답을 위한 ResponseEntity를 생성
     * "0000" 코드와 "success" 메시지를 사용하여 성공 응답을 나타냄
     *
     * @param result API 호출 결과로 반환할 객체
     * @return 성공 상태(200 OK)와 결과를 포함하는 ResponseEntity 객체
     */
    public static ResponseEntity<CommonResponse> success(Object result) {
        CommonResponse commonResponse = new CommonResponse("0000", "success", result);
        return ResponseEntity.ok(commonResponse);
    }

    /**
     * 에러 응답을 위한 ResponseEntity를 생성
     * @param errorEnum 에러 상황을 나타내는 Enum
     * @return 내부 서버 오류 상태(500)와 메세지를 포함하는 ResponseEntity 객체
     */
    public static ResponseEntity<CommonResponse> error(ErrorEnum errorEnum) {
        CommonResponse commonResponse = new CommonResponse(errorEnum.getCode(), errorEnum.getMessage(),"");
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(commonResponse);
    }

}
package site.balpyo.common.s3;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import lombok.Getter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
@Getter
public class S3Client {

    @Value("${cloud.aws.s3.bucket}")
    private String bucket;

    @Value("${cloud.aws.credentials.access-key}")
    private String accessKey;

    @Value("${cloud.aws.credentials.secret-key}")
    private String secretKey;

    @Value("${cloud.aws.region.static}")
    private String region;

    public AmazonS3 getAmazonS3() {
        AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);

        return AmazonS3ClientBuilder
                .standard()
                .withCredentials(new AWSStaticCredentialsProvider(credentials))
                .withRegion(region)
                .build();
    }
}
package site.balpyo.common.s3;

import com.amazonaws.SdkClientException;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.AccessControlList;
import com.amazonaws.services.s3.model.AmazonS3Exception;
import com.amazonaws.services.s3.model.GroupGrantee;
import com.amazonaws.services.s3.model.Permission;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.multipart.MultipartFile;
import site.balpyo.common.dto.UploadResponseDTO;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.UUID;

@RequiredArgsConstructor
@Configuration
@Slf4j
public class S3Util {
    private final S3Client s3Client;

    public void deleteFileFromS3(String objectPath) {
        AmazonS3 s3 = s3Client.getAmazonS3();
        try {
            s3.deleteObject(s3Client.getBucket(), objectPath);
            log.info("Delete Object successfully");
        } catch (SdkClientException e) {
            e.printStackTrace();
            log.info("Error deleteFileFromS3");
        }
    }

}
package site.balpyo.common.util;

public class CommonUtils {

    /**
     * 제공된 매개변수들 중 하나라도 {@code null}인지 여부를 검사
     *
     * 이 메서드는 가변 인자를 사용하여 여러 객체를 매개변수로 받아,
     * 그 중 어느 하나라도 {@code null} 값이 있는지 검사한 후 결과를 반환
     * 모든 매개변수가 {@code null}이 아닌 경우에만 {@code false}를 반환
     *
     * @param parameters 검사할 매개변수들. 여러 매개변수가 가변 인자로 전달
     * @return 매개변수 중 하나라도 {@code null}이면 {@code true}, 그렇지 않으면 {@code false}.
     */
    public static boolean isAnyParameterNullOrBlank(Object... parameters) {
        for (Object param : parameters) {
            if (param == null) {
                return true;
            }
            if (param instanceof String && ((String) param).isEmpty()) {
                return true;
            }
        }
        return false;
    }

}
package site.balpyo.common.util;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import site.balpyo.guest.entity.GuestEntity;
import site.balpyo.guest.repository.GuestRepository;

import java.util.Optional;

@Component
@RequiredArgsConstructor
public class GuestUtils {

    public static boolean verifyUID(String uid, GuestRepository guestRepository){
        Optional<GuestEntity> guestEntity = guestRepository.findById(uid);
        return guestEntity.isPresent();
    }
}
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.http.client.HttpClient;

import java.time.Duration;




@Configuration
public class WebClientConfig {

    @Bean
    public WebClient.Builder webClientBuilder() {
        return WebClient.builder()
            .clientConnector(new ReactorClientHttpConnector(
                HttpClient.create()
                    .responseTimeout(Duration.ofMinutes(5)) // 타임아웃 설정
            ));
    }
}
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

@Configuration
@EnableAsync
public class AsyncConfig {

    @Bean(name = "taskExecutor")
    public Executor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(10); // 기본 스레드 수
        executor.setMaxPoolSize(20); // 최대 스레드 수
        executor.setQueueCapacity(500); // 대기 큐 크기
        executor.setThreadNamePrefix("BalypoMyeotbun_thread-"); // 스레드 이름 접두사
        executor.initialize();
        return executor;
    }
}
package site.balpyo.common;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import site.balpyo.common.entity.ErrorLogEntity;

import java.util.List;

@Repository
public interface ErrorLogRepository extends JpaRepository<ErrorLogEntity, Long> {

    @Query(value = "SELECT * FROM error_log_entity ORDER BY created_at DESC LIMIT 100", nativeQuery = true)
    List<ErrorLogEntity> findTop100ByOrderByCreatedAtDesc();
}
package site.balpyo.common.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@Entity
@Table(name = "error_log_entity")
@Builder
@AllArgsConstructor
public class ErrorLogEntity {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @Lob
        @Column(columnDefinition = "LONGTEXT")
        private String errorText;

        private String className;
        private String methodName;
        private Integer lineNumber;
        private String endpoint;
        private String parameters;

        @CreationTimestamp
        private LocalDateTime createdAt;

}
package site.balpyo.common.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import site.balpyo.common.ErrorLogRepository;
import site.balpyo.common.entity.ErrorLogEntity;

import java.util.List;

@Controller
public class ErrorLogController {

    @Autowired
    private ErrorLogRepository errorLogRepository;

    @GetMapping("/error-logs")
    public String getErrorLogs(Model model) {
        List<ErrorLogEntity> errorLogs = errorLogRepository.findTop100ByOrderByCreatedAtDesc();
        model.addAttribute("errorLogs", errorLogs);
        return "error-logs";
    }
}
package site.balpyo.common.exception;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import site.balpyo.common.ErrorLogRepository;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.entity.ErrorLogEntity;

import java.util.Map;
import java.util.stream.Collectors;

@ControllerAdvice
public class GlobalExceptionHandler {

    private final ErrorLogRepository errorLogRepository;

    public GlobalExceptionHandler(ErrorLogRepository errorLogRepository) {
        this.errorLogRepository = errorLogRepository;
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<CommonResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {
        // 유효성 검사 실패에 대한 모든 에러 메시지를 연결하여 하나의 문자열로 만듭니다.
        String errorMessage = ex.getBindingResult().getAllErrors().stream()
                .map(error -> {
                    if (error instanceof FieldError) {
                        return ((FieldError) error).getField() + ": " + error.getDefaultMessage();
                    } else {
                        return error.getDefaultMessage();
                    }
                })
                .collect(Collectors.joining(", "));

        return ResponseEntity.badRequest().body(new CommonResponse("9001", errorMessage,""));
    }

    // 모든 예외를 처리하는 핸들러
    @ExceptionHandler(Exception.class)
    public ResponseEntity<CommonResponse> handleAllExceptions(Exception ex) {

        // 스택 트레이스에서 예외 발생 위치 가져오기
        StackTraceElement[] stackTrace = ex.getStackTrace();
        String className = stackTrace[0].getClassName();
        String methodName = stackTrace[0].getMethodName();
        Integer lineNumber = stackTrace[0].getLineNumber();

        // 예외 메시지 가져오기
        String errorMessage = ex.getMessage();

        // HttpServletRequest 가져오기
        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();

        // 엔드포인트 정보 가져오기
        String endpoint = request.getRequestURI();

        // 요청 인자 가져오기
        Map<String, String[]> parameterMap = request.getParameterMap();
        String parameters = parameterMap.entrySet().stream()
                .map(entry -> entry.getKey() + "=" + String.join(",", entry.getValue()))
                .collect(Collectors.joining("&"));

        // ErrorLogEntity 빌드
        ErrorLogEntity errorLogEntity = ErrorLogEntity.builder()
                .errorText(ex.getMessage())
                .className(className)
                .methodName(methodName)
                .lineNumber(lineNumber)
                .endpoint(endpoint)
                .parameters(parameters)
                .build();

        // 로그 저장
        errorLogRepository.save(errorLogEntity);

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .contentType(MediaType.APPLICATION_JSON)
                .body(new CommonResponse("9999", errorMessage, "")); }

}
package site.balpyo.voice.entity;

import jakarta.persistence.*;
import lombok.*;
import site.balpyo.script.entity.ScriptEntity;

@Getter
@Setter
@Entity
@Table(name = "voice")
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class VoiceEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long voiceId;

    @Column
    private String filePath;

    @Column
    private Integer playTime;

    @Column
    private String speechMark;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "script_id")
    private ScriptEntity scriptEntity;
}
package site.balpyo.ai.dto;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;




@Data
public class AIGenerateRequest {

    @NotNull(message = "scriptId은 비어 있을 수 없습니다.")
    private Long scriptId;

    @NotBlank(message = "Topic은 비어 있을 수 없습니다.")
    private String topic;

    @NotBlank(message = "Keywords는 비어 있을 수 없습니다.")
    private String keywords;

    @NotNull(message = "SecTime은 null일 수 없습니다.")
    private Integer secTime;

    private boolean test;

    @NotBlank(message = "balpyoSecretKey는 비어 있을 수 없습니다.")
    private String balpyoAPIKey;

    @NotBlank(message = "fcmtoken은 비어 있을 수 없습니다.")
    private String fcmtoken;

}
package site.balpyo.ai.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;


/**
 * @author dongheonlee
 */
@Data
public class PollyDTO {

    // 음성으로 변환할 텍스트
    @NotBlank(message = "text는 비어 있을 수 없습니다.")
    private String text;

    // 빠르기 조절 [-2, -1, 0, 1, 2]
    @NotBlank(message = "speed는 비어 있을 수 없습니다.")
    private int speed;

    @NotBlank(message = "balpyoSecretKey는 비어 있을 수 없습니다.")
    private String balpyoAPIKey;
}
package site.balpyo.ai.dto;


import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class AudioDTO {

    private String profileUrl;
    private String audio;
}
package site.balpyo.ai.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.io.InputStream;
import java.util.List;
import java.util.Map;

@Getter
@AllArgsConstructor
public class SynthesizeSpeechResultDTO {

    private InputStream audioStream;
    private List<Map<String, Object>> speechMarks;
}
package site.balpyo.ai.dto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;

@Getter
@JsonIgnoreProperties(ignoreUnknown = true)
public class GPTResponse {

    @JsonProperty("id")
    private String gptInfoId;

    @JsonProperty("object")
    private String gptObject;

    @JsonProperty("model")
    private String gptModel;

    @JsonProperty("choices")
    private List<Choice> gptGeneratedScript;

    @JsonProperty("created")
    private Integer gptCreatedAt;

    @JsonProperty("usage")
    private Usage usage;

    @Getter
    public static class Usage {
        @JsonProperty("prompt_tokens")
        private Integer promptToken;

        @JsonProperty("completion_tokens")
        private Integer completionToken;

        @JsonProperty("total_tokens")
        private Integer totalToken;
    }

    @Getter
    public static class Choice {
        @JsonProperty("index")
        private Integer index;

        @JsonProperty("message")
        private Message message;

        @JsonProperty("logprobs")
        private Object logprobs;

        @JsonProperty("finish_reason")
        private String finishReason;

        @Getter
        public static class Message {
            @JsonProperty("role")
            private String role;

            @JsonProperty("content")
            private String content;
        }
    }
}
package site.balpyo.ai.dto;

import jakarta.validation.constraints.NotBlank;
import lombok.Data;


/**
 * @author dongheonlee
 */
@Data
public class EstimateRequestDTO {

    // 소요시간을 계산할 입력 텍스트
    @NotBlank(message = "text는 비어 있을 수 없습니다.")
    private String text;

}
package site.balpyo.ai.dto.upload;

import lombok.Data;
import org.springframework.web.multipart.MultipartFile;

@Data
public class UploadFileDTO {

    private MultipartFile file;
}
package site.balpyo.ai.dto.upload;

import lombok.*;

import java.util.List;
import java.util.Map;

@Data
@Getter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class UploadResultDTO {
    private String profileUrl;
    private int playTime;
    private List<Map<String, Object>> speechMarks;
}package site.balpyo.ai.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor

public class AIGenerateResponse {
    private Object resultScript;
    private String gptId;
}
package site.balpyo.ai.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import site.balpyo.ai.entity.AIGenerateLogEntity;
import site.balpyo.ai.entity.GPTInfoEntity;

import java.util.Optional;

@Repository
public interface AIGenerateLogRepository extends JpaRepository<AIGenerateLogEntity, Long> {
    Optional<AIGenerateLogEntity> findByGptInfoEntity(GPTInfoEntity gptInfoEntity);
}
package site.balpyo.ai.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import site.balpyo.ai.entity.GPTInfoEntity;

@Repository
public interface GPTInfoRepository extends JpaRepository<GPTInfoEntity, String> {
}
package site.balpyo.ai.entity;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import site.balpyo.ai.dto.GPTResponse;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Getter
@Setter
@NoArgsConstructor
@Entity
@Table(name = "gpt_info_entity")
@Builder
@AllArgsConstructor
public class GPTInfoEntity {

    @Id
    private String gptInfoId;

    private String gptObject;

    private String gptModel;

    private Integer gptCreatedAt;

    private Integer promptToken;

    @Lob
    @Column(columnDefinition = "LONGTEXT")
    private String gptGeneratedScript;

    private Integer completionToken;

    private Integer totalToken;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @OneToMany(mappedBy = "gptInfoEntity", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<AIGenerateLogEntity> aiGenerateLogs = new ArrayList<>();

    public GPTInfoEntity ResponseBodyToGPTInfoEntity(Object resultBody){

        ObjectMapper mapper = new ObjectMapper();
        GPTResponse response = mapper.convertValue(resultBody, GPTResponse.class);

        return GPTInfoEntity.builder()
                .gptInfoId(response.getGptInfoId())
                .gptObject(response.getGptObject())
                .gptModel(response.getGptModel())
                .gptCreatedAt(response.getGptCreatedAt())
                .promptToken(response.getUsage().getPromptToken())
                .gptGeneratedScript(response.getGptGeneratedScript().get(0).getMessage().getContent().toString())
                .completionToken(response.getUsage().getCompletionToken())
                .totalToken(response.getUsage().getTotalToken())
                .build();
    }
}
package site.balpyo.ai.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import site.balpyo.ai.dto.AIGenerateRequest;
import site.balpyo.auth.entity.User;
import site.balpyo.guest.entity.GuestEntity;
import site.balpyo.script.entity.ScriptEntity;

import java.time.LocalDateTime;

@Getter
@Setter
@Entity
@Table(name = "ai_generate_log")
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class AIGenerateLogEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long aiLogId;

    private Integer secTime;

    private String topic;

    private String keywords;

    private double secPerLetter;

    @CreationTimestamp
    private LocalDateTime createdAt;

    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
    @JoinColumn(name = "gpt_info_id")
    private GPTInfoEntity gptInfoEntity;


    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
    @JoinColumn(name = "script_id")
    private ScriptEntity scriptEntity;

    public AIGenerateLogEntity convertToEntity(AIGenerateRequest aiGenerateRequest, GPTInfoEntity gptInfoEntity,ScriptEntity scriptEntity){
        return AIGenerateLogEntity.builder()
                .scriptEntity(scriptEntity)
                .secTime(aiGenerateRequest.getSecTime())
                .topic(aiGenerateRequest.getTopic())
                .keywords(aiGenerateRequest.getKeywords())
                .secPerLetter(0) // TODO :: 차후 0 값 변경
                .gptInfoEntity(gptInfoEntity)
                .build();
    }
}
package site.balpyo.ai.controller;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import site.balpyo.ai.dto.AIGenerateRequest;
import site.balpyo.ai.service.AIGenerateService;
import site.balpyo.common.dto.CommonResponse;

import reactor.core.publisher.Mono;




@CrossOrigin
@RestController
@RequestMapping("/user/ai")
@RequiredArgsConstructor
@Slf4j
public class AIUserController {

    private final AIGenerateService aiGenerateService;

    @Value("${secrets.BALPYO_API_KEY}") //TODO :: 임시 api 시크릿 키 구현 (차후 로그인 연동시 삭제예정)
    public String BALPYO_API_KEY;

//    @PostMapping("/script")
//    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
//    public Mono<ResponseEntity<CommonResponse>> generateScript(@Valid @RequestBody AIGenerateRequest aiGenerateRequest){
//
//        log.info("-------------------- Requested Generate Script");
//        log.info("-------------------- Request Topic : " + aiGenerateRequest.getTopic());
//        log.info("-------------------- Request Keywords : " + aiGenerateRequest.getKeywords());
//
//        return aiGenerateService.generateScript(aiGenerateRequest);
//    }

    @PostMapping("/script")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<CommonResponse> generateScript(@Valid @RequestBody AIGenerateRequest aiGenerateRequest){

        log.info("-------------------- Requested Generate Script");
        log.info("-------------------- Request Topic : " + aiGenerateRequest.getTopic());
        log.info("-------------------- Request Keywords : " + aiGenerateRequest.getKeywords());

        return aiGenerateService.generateScript(aiGenerateRequest);
    }

}
package site.balpyo.ai.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/admin/ai")
public class AIAdminController {
    @GetMapping("/log")
    public void getAIGenerateLog(){
        return;
    }

}
package site.balpyo.ai.controller;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.AccessControlList;
import com.amazonaws.services.s3.model.GroupGrantee;
import com.amazonaws.services.s3.model.Permission;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import site.balpyo.ai.dto.upload.UploadFileDTO;
import site.balpyo.ai.dto.upload.UploadResultDTO;
import site.balpyo.common.s3.S3Client;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.UUID;

@RestController
@RequiredArgsConstructor
@Log4j2
public class UploadController {

    @Value("${cloud.aws.s3.bucket}")
    private String bucketName;
    private final S3Client s3Client;

    //post 방식으로 파일 등록
    @PostMapping(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public UploadResultDTO upload(UploadFileDTO uploadFileDTO) throws IOException {

        AmazonS3 s3 = s3Client.getAmazonS3();

        MultipartFile multipartFile = uploadFileDTO.getFile();

        String profileURL = null;

        if (multipartFile != null) {
            String originalName = multipartFile.getOriginalFilename();
            log.info(originalName);

            String uuid = UUID.randomUUID().toString();

            // "_" 제거
            originalName = originalName.replaceAll("_", "");

            String originalFileName = uuid + "_" + originalName;

            File originalFile = new File(originalFileName);

            try {
                originalFile = convertMultipartFileToFile(uploadFileDTO.getFile(), originalFileName);

                String objectPath = "/" + originalFile;

                String baseUploadURL = "https://balpyo-bucket.s3.ap-northeast-2.amazonaws.com/audio";
                profileURL = baseUploadURL + objectPath;
                log.info(profileURL);

                s3.putObject(bucketName, objectPath, originalFile);
                setAcl(s3, objectPath);


            } finally {
                assert originalFile != null;
                originalFile.delete();
            }

            return UploadResultDTO.builder()
                    .profileUrl(profileURL)
                    .build();

        } else {
            return null;
        }
    }

    public File convertMultipartFileToFile(MultipartFile multipartFile, String fileName) {
        File convertedFile = new File(fileName);
        try (FileOutputStream fos = new FileOutputStream(convertedFile)) {
            fos.write(multipartFile.getBytes());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return convertedFile;
    }

    public void setAcl(AmazonS3 s3, String objectPath) {
        AccessControlList objectAcl = s3.getObjectAcl(bucketName, objectPath);
        objectAcl.grantPermission(GroupGrantee.AllUsers, Permission.Read);
        s3.setObjectAcl(bucketName, objectPath, objectAcl);
    }
}
package site.balpyo.ai.controller;

import com.amazonaws.util.IOUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jaudiotagger.audio.exceptions.CannotReadException;
import org.jaudiotagger.audio.exceptions.InvalidAudioFrameException;
import org.jaudiotagger.audio.exceptions.ReadOnlyFileException;
import org.jaudiotagger.tag.TagException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import site.balpyo.ai.dto.PollyDTO;
import site.balpyo.ai.dto.SynthesizeSpeechResultDTO;
import site.balpyo.ai.dto.upload.UploadResultDTO;
import site.balpyo.ai.service.PollyService;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;

import java.io.IOException;
import java.io.InputStream;


/**
 * @author dongheonlee
 * AWS polly를 활용한 tts 구현 컨트롤러
 */
@RestController
@Slf4j
@RequiredArgsConstructor
@RequestMapping("/polly")
public class PollyController {

    @Value("${secrets.BALPYO_API_KEY}") //TODO :: 임시 api 시크릿 키 구현 (차후 로그인 연동시 삭제예정)
    public String BALPYO_API_KEY;

    private final PollyService pollyService;

    /**
     * @param pollyDTO
     * @return 호출 시, 요청정보에 따른 mp3 음성파일을 반환(audioBytes)한다.
     */
    @PostMapping("/generateAudio")
    @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
    public ResponseEntity<?> synthesizeText(@RequestBody PollyDTO pollyDTO) {

        log.info("--------------------controller로 텍스트 음성 변환 요청");
        
        if (!BALPYO_API_KEY.equals(pollyDTO.getBalpyoAPIKey())) {
            return CommonResponse.error(ErrorEnum.BALPYO_API_KEY_ERROR);
        }

        try {
            // Amazon Polly와 통합하여 텍스트를 음성으로 변환
            SynthesizeSpeechResultDTO synthesizeSpeechResultDTO = pollyService.synthesizeSpeech(pollyDTO);


            if (synthesizeSpeechResultDTO.getAudioStream() == null || synthesizeSpeechResultDTO.getSpeechMarks() == null) {
                log.error("Amazon Polly 음성 변환 실패: 반환된 오디오 정보가 null입니다.");
                return CommonResponse.error(ErrorEnum.INTERNAL_SERVER_ERROR);
            }

            // InputStream을 byte 배열로 변환
            byte[] audioBytes = IOUtils.toByteArray(synthesizeSpeechResultDTO.getAudioStream());

            // MP3 파일을 클라이언트에게 반환
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
            headers.setContentDispositionFormData("GeneratedAudio", "speech.mp3");

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(audioBytes);

        } catch (IOException e) {
            log.error("내부 서버 오류: " + e.getMessage());
            return CommonResponse.error(ErrorEnum.INTERNAL_SERVER_ERROR);
        }
    }

    @PostMapping("/uploadSpeech")
    public ResponseEntity<UploadResultDTO> synthesizeAndUploadSpeech(@RequestBody PollyDTO pollyDTO) throws IOException, CannotReadException, TagException, InvalidAudioFrameException, ReadOnlyFileException {
        UploadResultDTO uploadResultDTO = pollyService.synthesizeAndUploadSpeech(pollyDTO);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new ResponseEntity<>(uploadResultDTO, headers, HttpStatus.OK);
    }

}
package site.balpyo.ai.service;


import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import site.balpyo.ai.dto.AIGenerateRequest;
import site.balpyo.ai.dto.AIGenerateResponse;
import site.balpyo.ai.entity.AIGenerateLogEntity;
import site.balpyo.ai.entity.GPTInfoEntity;
import site.balpyo.ai.repository.AIGenerateLogRepository;
import site.balpyo.auth.repository.UserRepository;
import site.balpyo.auth.service.AuthenticationService;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;
import site.balpyo.common.util.CommonUtils;
import site.balpyo.fcm.FcmService;
import site.balpyo.fcm.dto.FcmSendDTO;
import site.balpyo.guest.entity.GuestEntity;
import site.balpyo.guest.repository.GuestRepository;
import site.balpyo.script.entity.ScriptEntity;
import site.balpyo.script.repository.ScriptRepository;
import site.balpyo.auth.entity.User;

import site.balpyo.auth.service.UserDetailsImpl;



import java.io.IOException;
import java.util.Map;
import java.util.Optional;

import java.util.Objects;


@Service
@Slf4j  
@RequiredArgsConstructor
public class AIGenerateService {

    private final AIGenerateUtils aiGenerateUtils;

    private final AIGenerateLogRepository aiGenerateLogRepository;

    private final GuestRepository guestRepository;

    private final ScriptRepository scriptRepository;

    private final FcmService fcmService;

    private final UserRepository userRepository;

    private final AuthenticationService authenticationService;
    @Value("${secrets.GPT_API_KEY}")
    public String GPT_API_KEY;

//    @Transactional
//    public Mono<ResponseEntity<CommonResponse>> generateScript(AIGenerateRequest request){
//        User user = authenticationService.authenticationToUser();
//        // Test인 경우 테스트 값 반환
//        if (request.isTest()) {
//            return Mono.just(CommonResponse.success(new GPTTestObject().getGPTTestObject()));
//        }
//
//        // API Key가 없는 경우 에러 반환
//        if (CommonUtils.isAnyParameterNullOrBlank(GPT_API_KEY)) {
//            return Mono.just(CommonResponse.error(ErrorEnum.GPT_API_KEY_MISSING));
//        }
//
//        // 1. 주제, 소주제, 시간을 기반으로 프롬프트 생성
//        String currentPromptString = aiGenerateUtils.createPromptString(request.getTopic(), request.getKeywords(), request.getSecTime());
//
//        // 2. 작성된 프롬프트를 기반으로 GPT에게 대본 작성 요청
//        Mono<Map> generatedScriptMono = aiGenerateUtils.requestScriptGeneration(currentPromptString, 0.5f, 100000, GPT_API_KEY);
//
//        // 3. GPT 응답을 기반으로 대본 추출 및 대본이 없다면 대본 생성 실패 에러 반환
//        return generatedScriptMono.flatMap(generatedScriptObject -> {
//            Object resultScript = generatedScriptObject.get("choices");
//            if (CommonUtils.isAnyParameterNullOrBlank(resultScript)) {
//                log.info("[-] GPT 응답에서 대본을 추출하는 데 실패했습니다.");
//                return Mono.just(CommonResponse.error(ErrorEnum.GPT_GENERATION_ERROR));
//            }
//
//            // 4. GPT 응답에서 Body 추출
//            Object resultBody = generatedScriptObject;
//
//            log.info("-------------------- resultBody");
//            log.info(resultBody.toString());
//
//            // 5. GPT 응답에서 GPTInfoEntity 추출 및 jpa로 저장할 수 있도록 GPTInfoEntity로 변환
//            GPTInfoEntity gptInfoData = new GPTInfoEntity().ResponseBodyToGPTInfoEntity(resultBody);
//
//            log.info("-------------------- GPT Info Data");
//            log.info(gptInfoData.getGptGeneratedScript());
//
//
//            // 6. 대본 저장
//            Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user, request.getScriptId());
//
//            if (optionalScriptEntity.isEmpty()) {
//                log.info("[-] 대본을 찾을 수 없습니다.");
//                return Mono.just(CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND));
//            }
//
//            ScriptEntity scriptEntity = optionalScriptEntity.get();
//            scriptEntity.setScript(gptInfoData.getGptGeneratedScript());
//            scriptEntity.setIsGenerating(false);
//
//            log.info("------------------");
//            log.info(scriptEntity.toString());
//
//
//            ScriptEntity newScirpt = scriptRepository.save(scriptEntity);
//
//
//
//            AIGenerateLogEntity aiGenerateLog = new AIGenerateLogEntity().convertToEntity(request, gptInfoData, optionalScriptEntity.get());
//
//
//            // 7. AI 사용기록 저장
//            aiGenerateLogRepository.save(aiGenerateLog);
//            String GPTId = aiGenerateLog.getGptInfoEntity().getGptInfoId();
//            String newScriptId = newScirpt.getScriptId().toString();
//
//            log.info("-------------------- AI Generate Log");
//            log.info(newScriptId);
//
//
//            // FCM 푸쉬 알림 요청
//            FcmSendDTO fcmSendDTO = new FcmSendDTO(request.getFcmtoken(), "대본 생성 알림", "요청하신 대본이 완성되었어요!", newScriptId);
//            log.info(fcmSendDTO.toString());
//
//            try {
//                fcmService.sendMessageTo(fcmSendDTO).subscribe();
//            } catch (IOException e) {
//                log.error("[-] IOException occurred: " + e.getMessage());
//                return Mono.just(CommonResponse.error(ErrorEnum.INTERNAL_SERVER_ERROR));
//            }
//
//            return Mono.just(CommonResponse.success(new AIGenerateResponse(resultScript, GPTId)));
//
//            });
//        }

    @Transactional
    public ResponseEntity<CommonResponse> generateScript(AIGenerateRequest request){

        User user = authenticationService.authenticationToUser();

        // TODO :: TEST인 경우 TEST값 반환 <- 개발 완료 후 삭제 예정
        if(request.isTest()) return CommonResponse.success(new GPTTestObject().getGPTTestObject());

        //API KEY가 없는경우 에러 반환
        String CURRENT_GPT_API_KEY = GPT_API_KEY; if(CommonUtils.isAnyParameterNullOrBlank(CURRENT_GPT_API_KEY)) return CommonResponse.error(ErrorEnum.GPT_API_KEY_MISSING);

        //1. 주제, 소주제, 시간을 기반으로 프롬프트 생성
        String currentPromptString = aiGenerateUtils.createPromptString(request.getTopic(), request.getKeywords(), request.getSecTime());
        //2. 작성된 프롬프트를 기반으로 GPT에게 대본작성 요청
        ResponseEntity<Map> generatedScriptObject = aiGenerateUtils.requestGPTTextGeneration(currentPromptString, 0.5f, 100000, CURRENT_GPT_API_KEY);
        //3. GPT응답을 기반으로 대본 추출 + 대본이 없다면 대본 생성 실패 에러 반환
        Object resultScript = generatedScriptObject.getBody().get("choices"); if(CommonUtils.isAnyParameterNullOrBlank(resultScript)) return CommonResponse.error(ErrorEnum.GPT_GENERATION_ERROR);
        //4. GPT 응답에서 Body 추출
        Object resultBody = generatedScriptObject.getBody();
        //5. GPT 응답에서 GPTInfoEntity 추출 및 jpa로 저장할 수 있도록 GPTInfoEntity로변환
        GPTInfoEntity gptInfoData = new GPTInfoEntity().ResponseBodyToGPTInfoEntity(resultBody);

        //6. AI 사용기록에 gpt정보와 요청값들을 AIGenerateLogEntity형태로 변환



        Optional<ScriptEntity> optionalScriptEntity = scriptRepository.findByUserAndScriptId(user, request.getScriptId());
        if(optionalScriptEntity.isEmpty()) return CommonResponse.error(ErrorEnum.SCRIPT_DETAIL_NOT_FOUND);

        AIGenerateLogEntity aiGenerateLog = new AIGenerateLogEntity().convertToEntity(request, gptInfoData,optionalScriptEntity.get());

        aiGenerateLogRepository.save(aiGenerateLog); //저장

        log.info("-------------------- 저장된 사용 기록 : " + aiGenerateLog);

        return CommonResponse.success(new AIGenerateResponse(resultScript, gptInfoData.getGptInfoId()));
    }
}package site.balpyo.ai.service;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.polly.AmazonPolly;
import com.amazonaws.services.polly.AmazonPollyClientBuilder;
import com.amazonaws.services.polly.model.*;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.AccessControlList;
import com.amazonaws.services.s3.model.GroupGrantee;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.Permission;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jaudiotagger.audio.mp3.MP3AudioHeader;
import org.jaudiotagger.audio.mp3.MP3File;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import site.balpyo.ai.dto.PollyDTO;
import site.balpyo.ai.dto.SynthesizeSpeechResultDTO;
import site.balpyo.ai.dto.upload.UploadResultDTO;
import site.balpyo.common.s3.S3Client;


import java.io.*;
import java.net.URL;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.*;

/**
 * @author dongheonlee
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class PollyService {

    @Value("${cloud.aws.s3.bucket}")
    private String bucketName;
    private final S3Client s3Client;

    /**
     * 입력된 텍스트와 선택된 빠르기에 따라 음성파일으로 변환하여 반환한다.
     *
     * @param pollyDTO
     * @return mp3 오디오 파일
     */
    public SynthesizeSpeechResultDTO synthesizeSpeech(PollyDTO pollyDTO) {

        String inputText = pollyDTO.getText();
        int speed = pollyDTO.getSpeed();

        log.info("-------------------- 클라이언트가 요청한 대본 :" + inputText);
        log.info("-------------------- 클라이언트가 요청한 빠르기 :" + speed);

        BasicAWSCredentials awsCreds = new BasicAWSCredentials(s3Client.getAccessKey(), s3Client.getSecretKey());
        AmazonPolly amazonPolly = AmazonPollyClientBuilder.standard()
                .withCredentials(new AWSStaticCredentialsProvider(awsCreds))
                .withRegion(Regions.AP_NORTHEAST_2) // AWS 리전 설정
                .build();


        // 빠르기 계산
        float relativeSpeed = calculateRelativeSpeed(speed);

        log.info("-------------------- 선택한 빠르기 :" + relativeSpeed);

        // SSML 텍스트 생성
        String ssmlText = buildSsmlText(inputText, relativeSpeed);

        // SynthesizeSpeechRequest 생성 및 설정
        SynthesizeSpeechRequest synthesizeSpeechRequest = new SynthesizeSpeechRequest()
                .withText(ssmlText)
                .withTextType(TextType.Ssml)
                .withOutputFormat(OutputFormat.Mp3) // MP3 형식
                .withVoiceId(VoiceId.Seoyeon) // 한국어 음성 변환 보이스
                .withTextType("ssml"); // SSML 형식 사용

        // Speech Marks 요청 설정
        SynthesizeSpeechRequest speechMarkRequest = new SynthesizeSpeechRequest()
                .withText(ssmlText)
                .withTextType(TextType.Ssml)
                .withVoiceId(VoiceId.Seoyeon)
                .withOutputFormat(OutputFormat.Json) // JSON 형식으로 Speech Mark 정보 요청
                .withSpeechMarkTypes(SpeechMarkType.Word);

        // Speech Mark 정보 요청
        InputStream inputStream = amazonPolly.synthesizeSpeech(speechMarkRequest).getAudioStream();

        // Speech Marks 데이터를 담을 리스트
        List<Map<String, Object>> speechMarksList = new ArrayList<>();

        // 결과 처리 및 String으로 변환
        try (Scanner scanner = new Scanner(inputStream, "UTF-8")) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                Map<String, Object> speechMarkData = getStringObjectMap(line);
                System.out.println(line);

                speechMarksList.add(speechMarkData);
            }
            // 현재 재생 시간을 밀리초 단위로 변환하고
            // 프론트에서 현재 재생 시간이 단어의 시작 시간과 끝 시간 사이에 있을 때 텍스트 색칠하면..?
        } catch (Exception e) {
            log.error("Speech Mark 정보 읽기 실패: ", e);
        }

        try { // 텍스트를 음성으로 변환하여 InputStream으로 반환
            SynthesizeSpeechResult synthesizeSpeechResult = amazonPolly.synthesizeSpeech(synthesizeSpeechRequest);
            InputStream audioStream = synthesizeSpeechResult.getAudioStream();
            log.info("-------------------- 요청된 문자열 개수 : " + synthesizeSpeechResult.getRequestCharacters());
            log.info("-------------------- 음성변환 요청 성공");

            // SynthesizeSpeechResultDTO 인스턴스 생성 및 반환
            return new SynthesizeSpeechResultDTO(audioStream, speechMarksList);
        } catch (AmazonPollyException e) {
            log.error("-------------------- 음성 변환 실패: " + e.getErrorMessage());
            throw e;
        }
    }

    private static Map<String, Object> getStringObjectMap(String line) {
        JSONObject jsonObject = new JSONObject(line);

        Map<String, Object> speechMarkData = new HashMap<>();
        speechMarkData.put("time", jsonObject.getInt("time"));
        speechMarkData.put("type", jsonObject.getString("type"));
        speechMarkData.put("start", jsonObject.getInt("start"));
        speechMarkData.put("end", jsonObject.getInt("end"));
        speechMarkData.put("value", jsonObject.getString("value"));
        return speechMarkData;
    }

    /**
     * mp3 audio 생성 시, 빠르기 설정 메소드
     */
    private static float calculateRelativeSpeed(int speed) {
        // 기본 속도
        float baseSpeed = 1.1f;

        switch (speed) {
            case -2:
                return baseSpeed * 0.9f;
            case -1:
                return baseSpeed * 0.975f;
            case 1:
                return baseSpeed * 1.125f;
            case 2:
                return baseSpeed * 1.15f;
            default:
                return baseSpeed;
        }
    }

    /**
     * SSML 텍스트 생성 메소드
     */
    private String buildSsmlText(String inputText, float relativeSpeed) {
        StringBuilder ssmlBuilder = new StringBuilder();
        ssmlBuilder.append("<speak>");
        ssmlBuilder.append(String.format("<prosody rate=\"%f%%\">", relativeSpeed * 100));

        for (int i = 0; i < inputText.length(); i++) {
            char ch = inputText.charAt(i);

            switch (ch) {
                case ',':
                    // 쉼표일 때 숨쉬기 태그 추가
                    ssmlBuilder.append("<break time=\"400ms\"/>");
                    break;
                case '.':
                    ssmlBuilder.append("<break time=\"601ms\"/>");
                    break;
                case '!':
                    ssmlBuilder.append("<break time=\"600ms\"/>");
                    break;
                case '?':
                    ssmlBuilder.append("<break time=\"801ms\"/>");
                    break;
                case '\n':
                    // 다음 문자가 개행 문자이면 숨소리 추가
                    if (i + 1 < inputText.length() && inputText.charAt(i + 1) == '\n') {
                        ssmlBuilder.append("<amazon:breath/>");
                        // 이미 \n\n을 처리했으므로 추가로 하나 더 넘어감
                        i++;
                    } else {
                        // 한 개의 개행 문자일 때 200ms 휴식 추가
                        ssmlBuilder.append("<break time=\"200ms\"/>");
                    }
                    break;
                case '숨':
                    if (inputText.startsWith("숨 고르기+1", i)) {
                        ssmlBuilder.append("<break time=\"1000ms\"/>");
                        i += 7; // "숨 고르기+1"의 길이만큼 인덱스 증가
                    }
                    break;
                case 'P':
                    if (inputText.startsWith("PPT 넘김+2", i)) {
                        ssmlBuilder.append("<break time=\"2000ms\"/>");
                        i += 8; // "PPT 넘김+2"의 길이만큼 인덱스 증가
                    }
                    break;    
                default:
                    // 기본 문자 처리
                    ssmlBuilder.append(ch);
                    break;
            }
        }

        ssmlBuilder.append("</prosody>");
        ssmlBuilder.append("</speak>");
        return ssmlBuilder.toString();
    }

    public UploadResultDTO synthesizeAndUploadSpeech(PollyDTO pollyDTO) {

        SynthesizeSpeechResultDTO synthesizeSpeechResultDTO = synthesizeSpeech(pollyDTO);
        InputStream audioStream = synthesizeSpeechResultDTO.getAudioStream(); // 음성 파일 생성
        List<Map<String, Object>> speechMarksList = synthesizeSpeechResultDTO.getSpeechMarks();

        // 파일 이름 생성
        String fileName = UUID.randomUUID() + ".mp3";

        log.info("--------------------- " + fileName);

        // S3에 업로드
        Map<String, Object> audioInfo = uploadToS3(audioStream, fileName);

        String baseUploadURL = audioInfo.get("baseUploadURL").toString();
        int durationInSeconds = (int) audioInfo.get("durationInSeconds");
        log.info("--------------------- " + baseUploadURL);
        log.info("--------------------- " + durationInSeconds);

        return UploadResultDTO.builder()
                .profileUrl(baseUploadURL)
                .playTime(durationInSeconds)
                .speechMarks(speechMarksList)
                .build();
    }

    private Map<String, Object> uploadToS3(InputStream inputStream, String fileName) {
        log.info("--------------------- " + fileName);
    
        // InputStream의 크기를 계산하기 위해 ByteArrayOutputStream을 사용
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                byteArrayOutputStream.write(buffer, 0, bytesRead);
            }
        } catch (IOException e) {
            log.error("Error reading input stream", e);
        }
    
        byte[] data = byteArrayOutputStream.toByteArray();
        InputStream byteArrayInputStream = new ByteArrayInputStream(data);
    
        // S3에 업로드할 ObjectMetadata 생성
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentLength(data.length); // Content-Length 설정
    
        // S3에 업로드
        s3Client.getAmazonS3().putObject(bucketName, fileName, byteArrayInputStream, metadata);
    
        // ACL 설정
        setAcl(s3Client.getAmazonS3(), fileName);
    
        // 업로드된 파일의 URL 생성
        String baseUploadURL = "https://balpyo-bucket.s3.ap-northeast-2.amazonaws.com/" + fileName;
    
        log.info("업로드 위치------" + baseUploadURL);
    
        // 임시 파일로 저장하여 처리
        int durationInSeconds = 0; // 초기화
    
        try {
            URL url = new URL(baseUploadURL);
            InputStream targetStream = url.openStream();
            fileName = Paths.get(url.getPath()).getFileName().toString();
            File localFile = new File(System.getProperty("java.io.tmpdir"), fileName);
    
            log.info("Download------" + localFile);
            Files.copy(targetStream, localFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            targetStream.close(); // 스트림 닫기
    
            // MP3 파일의 재생 시간 계산
            MP3File mp3File = new MP3File(localFile);
            log.info("mp3 file" + mp3File);
    
            MP3AudioHeader audioHeader = (MP3AudioHeader) mp3File.getAudioHeader();
            durationInSeconds = audioHeader.getTrackLength();
    
            log.info("------------ 재생시간: " + durationInSeconds + "초");
    
            // 임시 파일 삭제
            localFile.delete();
    
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // 결과를 Map에 담아 반환
        Map<String, Object> result = new HashMap<>();
        result.put("baseUploadURL", baseUploadURL);
        result.put("durationInSeconds", durationInSeconds);
        return result;
    }
    


    public void setAcl(AmazonS3 s3, String objectPath) {
        AccessControlList objectAcl = s3.getObjectAcl(bucketName, objectPath);
        objectAcl.grantPermission(GroupGrantee.AllUsers, Permission.Read);
        s3.setObjectAcl(bucketName, objectPath, objectAcl);
    }
}package site.balpyo.ai.service;


import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.Getter;


public class GPTTestObject {
    String jsonString = "[{\"text\": \"\\n\\n안녕하세요, 여러분. 오늘은 스크럼을 효율적으로 하는 방법에 대해 알아보겠습니다. 스크럼은 소프트웨어 개발 방법론 중 하나로, 팀 기반의 애자일 개발 프로세스입니다. 이를 통해 팀은 작은 주기로 나누어진 작업을 완료하고, 지속적으로 개선하며 제품을 출시할 수 있습니다.\\n\\n효율적인 스크럼을 위해서는 몇 가지 중요한 요소가 있습니다. 첫 번째로는 팀의 역할과 책임을 명확히 하는 것입니다. 스크럼에서는 제품 책임자, 스크럼 마스터, 개발 팀으로 구성되며, 각자의 역할과 책임을 잘 이해하고 역할을 수행해야 합니다.\\n\\n두 번째로는 스크럼 이벤트를 잘 계획하고 진행하는 것이 중요합니다. 스크럼에서는 일일 스크럼, 스프린트 계획 회의, 스프린트 검토 회의, 스프린트 회고 등의 이벤트가 있습니다. 이를 효율적으로 진행하고, 각 이벤트에서 나오는 결과물을 잘 활용하는 것이 스크럼의 핵심입니다.\\n\\n세 번째로는 팀의 커뮤니케이션과 협업을 잘 조율하는 것이 중요합니다. 스크럼에서는 팀원들 간의 의사소통을 매우 중요하게 여기며, 서로의 업무를 이해하고 지원하는 것이 필수적입니다. 또한 스크럼에서는 개발 팀과 제품 책임자, 스크럼 마스터 간의 원활한 협업이 필요합니다.\\n\\n마지막으로는 지속적인 개선과 학습을 추구하는 것이 스크럼의 핵심 가치 중 하나입니다. 스크럼에서는 스프린트 회고를 통해 지속적으로 개선할 점을 찾고, 이를 반영하여 더 나은 제품을 만들어가는 것이 중요합니다.\\n\\n이렇게 몇 가지 핵심 요소를 잘 준수하면, 효율적인 스크럼을 구축할 수 있습니다. 이를 통해 팀은 더 빠르고 효율적으로 제품을 출시할 수 있으며, 지속적인 개선과 협업을 통해 더 나은 결과물을 만들어낼 수 있습니다.\\n\\n이상으로 스크럼을 효율적으로 하는 방법에 대해 알아보았습니다. 감사합니다.\", \"index\": 0, \"logprobs\": null, \"finish_reason\": \"stop\"}]";
    public Object getGPTTestObject(){
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Object testObjects = objectMapper.readValue(jsonString, Object.class);
            return testObjects;
        } catch (Exception e) {
            return "";
        }
    }

}package site.balpyo.ai.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;


import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

@Component
@Slf4j
@RequiredArgsConstructor    
public class AIGenerateUtils {
    private static final String ENDPOINT = "https://api.openai.com/v1/chat/completions";

    private final WebClient.Builder webClientBuilder;

    public String createPromptString(String topic, String keywords, Integer sec) {

        // 초기화한 값에 해당하는 글자 수와 시간 비율 계산
        int initialCharacterCount = 425; // 초기화한 공백 포함 글자 수
        double characterPerSecond = (double) initialCharacterCount / 60.0; // 초당 평균 글자 수

        log.info("-------------------- Character per second : " + characterPerSecond);

        // 주어진 시간(sec)에 해당하는 글자 수 계산
        int targetCharacterCount = (int) (sec * characterPerSecond);

        log.info("-------------------- 주어진 시간(" + sec + "초)에 해당하는 예상 글자수 : " + targetCharacterCount);

        // 주어진 시간(sec)에 해당하는 바이트 수 계산
        int targetByteCount = targetCharacterCount * 3; // 한글은 3바이트로 가정

        log.info("-------------------- 예상 바이트수 : " + targetByteCount + "byte");


        String bad_example_prompt = """
                ## It's bad response example

                Given the complexity of generating a script that meets the exact byte requirement of 6417 bytes, including spaces, special characters, and line breaks, but excluding certain characters as specified, it's challenging to ensure precision in the first attempt. However, I can provide you with a script on the topic \"부산에서 제일 인기있는 메뉴는 뭘까?\" highlighting popular foods in Busan, which you can then adjust as needed to meet your specific byte requirement. Here's a sample script to get you started:\n\n---\n\n안녕하세요, 여러분. 오늘 제가 여러분께 소개할 주제는 바로 '부산에서 제일 인기있는 메뉴는 뭘까?'입니다. 부산하면 떠오르는 이미지가 있으신가요? 아름다운 해변, 시원한 바람, 그리고 무엇보다도 맛있는 음식, 맞나요? 네, 오늘은 그 중에서도 부산을 대표하는 인기 메뉴에 대해 이야기해보려고 합니다.\n\n첫 번째로 소개할 음식은 바로 '밀면'입니다. 부산의 뜨거운 여름, 시원한 밀면 한 그릇이야말로 최고의 별미죠. 밀면은 밀가루로 만든 면에 육수와 얼음을 넣어 먹는 음식으로, 간단해 보이지만 그 맛이 일품입니다. 특히 부산 사람들은 여름철에 밀면을 자주 찾는다고 해요. 밀면 위에 올라가는 고명으로는 얇게 썬 오이, 계란 반쪽, 그리고 특제 소스가 빠질 수 없죠.\n\n두 번째로 소개할 음식은 '동래파전'입니다. 동래 지역은 옛날부터 파전으로 유명했는데요, 부산에 방문하면 꼭 한 번쯤은 맛보아야 할 음식 중 하나입니다. 바삭바삭한 파전에 막걸리 한 잔은 정말 꿀맛이죠. 특히 비 오는 날에는 파전과 막걸리의 인기가 더욱 높아진답니다.\n\n세 번째로는 '부산어묵'을 빼놓을 수 없겠죠. 부산하면 어묵, 어묵하면 부산이라 할 정도로 유명한 음식입니다. 부산어묵은 그 맛과 품질이 전국적으로 인정받고 있어요. 특히 겨울철에 따뜻한 어묵국물은 추위를 녹이는데 제격이죠. 부산의 어묵은 다양한 모양과 크기로 제공되어, 먹는 재미가 있습니다.\n\n네 번째로 추천드릴 음식은 '해운대 회'입니다. 부산하면 해운대를 빼놓을 수 없고, 해운대하면 신선한 회를 빼놓을 수 없죠. 해운대 해변가에는 신선한 회를 즐길 수 있는 수많은 횟집이 즐비해 있습니다. 바다를 바라보며 먹는 신선한 회는 그 맛이 일품입니다. 특히, 부산은 해산물의 천국이라 다양한 종류의 회를 맛볼 수 있어요.\n\n마지막으로 소개할 음식은 '씨앗호떡'입니다. 부산의 겨울 거리를 걷다 보면 꼭 마주치게 되는 간식이죠. 달콤한 설탕과 견과류가 가득 찬 씨앗호떡은 한 입 베어 물면 겨울의 추위도 잊게 만듭니다. 부산을 방문한 관광객들 사이에서도 꼭 맛봐야 할 음식으로 손꼽히고 있어요.\n\n여러분, 오늘 소개해 드린 부산의 인기 메뉴는 어떠셨나요? 밀면부터 시작해 동래파전, 부산어묵, 해운대 회, 그리고 씨앗호떡까지. 부산에 가시게 되면 꼭 한 번씩 맛보시길 바랍니다. 맛있는 음식과 함께 즐거운 추억도 많이 만드시길 바랍니다. 감사합니다.\n\n---\n\nThis script introduces popular dishes in Busan and encourages the audience to try them out. Adjusting it to meet the exact byte requirement would involve closely monitoring the length and possibly adding or removing content to fit the specifications.

                """;

        String good_example_prompt = """
                ## It's good response example

                안녕하세요! 오늘은 \"제주도 성산 맛집은 어디지?\"라는 주제로 여러분과 함께할 예정입니다. 제주도 하면 떠오르는 것들이 많지만, 그중에서도 음식은 빼놓을 수 없는 매력 중 하나입니다. 특히, 성산 일대는 그 매력을 두 배로 느낄 수 있는 곳이죠. 오늘 저와 함께 성산의 숨겨진 맛집을 탐방해 보실까요?\n\n먼저, 제주도 하면 빼놓을 수 없는 음식 중 하나는 바로 흑돼지 바비큐입니다. 성산에는 이 흑돼지를 전문으로 하는 맛집이 여럿 있는데요, 그중에서도 가장 추천드리고 싶은 곳은 '성산흑돼지마을'입니다. 이곳의 흑돼지는 육즙이 풍부하고 고소한 맛이 일품인데요, 제주도의 청정 자연에서 자란 흑돼지만을 사용하기 때문에 그 맛이 더욱 특별합니다.\n\n다음으로 소개해 드릴 맛집은 '성산일출봉해물라면'입니다. 제주도 하면 해물도 빼놓을 수 없죠. 이곳의 해물라면은 신선한 해물과 진한 육수가 어우러져, 한 그릇으로도 충분히 든든하고 만족스러운 식사가 됩니다. 특히, 일출을 보며 먹는 해물라면의 맛은 잊을 수 없는 추억이 될 거예요.\n\n제주도의 또 다른 매력은 바로 감귤입니다. 성산에는 '감귤밭 카페'라는 곳이 있는데요, 이곳에서는 신선한 감귤로 만든 다양한 음료와 디저트를 즐길 수 있습니다. 감귤밭 한가운데 위치해 있어, 감귤의 향기를 맡으며 여유로운 시간을 보낼 수 있는 것이 특징입니다.\n\n마지막으로, 제주도의 바다를 느낄 수 있는 맛집을 소개해 드리겠습니다. '성산포해녀의집'입니다. 이곳에서는 해녀가 직접 잡은 신선한 해산물을 맛볼 수 있는데요, 특히, 성게미역국은 이곳의 대표 메뉴입니다. 제주도의 바다를 한 스푼에 담은 듯한 깊고 진한 맛을 느낄 수 있습니다.\n\n오늘 소개해 드린 성산의 맛집들은 모두 그 지역만의 독특한 매력을 담고 있습니다. 제주도의 아름다운 자연과 어우러진 이 맛집들은 여러분의 여행을 더욱 특별하게 만들어 줄 것입니다. 제주도 성산에서의 맛있는 추억, 꼭 만들어 보시길 바랍니다.\n\n여러분, 제주도 성산의 맛집 탐방은 여기까지입니다. 제주도의 맛과 멋을 함께 느낄 수 있는 이번 여행이 여러분에게 즐거운 추억이 되었기를 바랍니다. 다음에 또 다른 맛집과 함께 돌아오겠습니다. 감사합니다.
                """;


        log.info("-------------------- Created Prompt String");
            
        String requestPrompt = "# AI role : You are a Korean presentation script writer.\n" +
                "You should write a script for a presentation in Korean.\n" + 
                "The topic is " + topic + ", and the keywords are " + keywords + ".\n" +
                "Please generate a script of " + targetByteCount + " bytes.\n" +
                "Count every character, including spaces, special characters, and line breaks, as one byte.\n" +
                "When creating a script, exclude characters such as '(', ')', ''', '-', '[', ']' and '_'.\n" +
                "Please write a script that is easy to read and understand.\n" +
                "I want a text form in which people can read and speak directly.\n"+
                "Because the script will be used for a presentation, please make sure it is engaging and informative.\n" +
                "This is to prevent bugs that may occur in scripts that include request values in the response.\n" +
                "It must be exactly " + targetByteCount + " bytes long. \n" +
                "# example\n" + 
                bad_example_prompt + "\n" +
                good_example_prompt + "\n"
                +
                "GPT, you're smart enough to provide me with a script of " + targetByteCount + " bytes, right? Can you do that?";

        return requestPrompt;
    }



    public ResponseEntity<Map> requestGPTTextGeneration(String prompt, float temperature, int maxTokens ,String API_KEY) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + API_KEY);

        Map<String, Object> message = new HashMap<>();
        message.put("role", "user");
        message.put("content", prompt);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "gpt-4-0125-preview");
        requestBody.put("messages", Arrays.asList(message));
        requestBody.put("temperature", temperature);

        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(requestBody, headers);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<Map> response = restTemplate.postForEntity(ENDPOINT, requestEntity, Map.class);

        return response;
    }


    public Mono<Map> requestScriptGeneration(String prompt, float temperature, int maxTokens ,String API_KEY) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + API_KEY);

        Map<String, Object> message = new HashMap<>();
        message.put("role", "user");
        message.put("content", prompt);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("model", "gpt-4-0125-preview");
        requestBody.put("messages", Arrays.asList(message));
        requestBody.put("temperature", temperature);

        Mono<Map> response = webClientBuilder.build()
                .post()
                .uri(ENDPOINT)
                .header("Authorization", "Bearer " + API_KEY)
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(Map.class);

        return response;
    }

}package site.balpyo.guest.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@AllArgsConstructor
@Data
public class VerifyResponse {
    boolean isVerified;
    String yourUID;
}
package site.balpyo.guest.dto;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class UIDResponse {

    private String uid;

}
package site.balpyo.guest.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import site.balpyo.guest.entity.GuestEntity;

public interface GuestRepository  extends JpaRepository<GuestEntity, String> {

}
package site.balpyo.guest.entity;

import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import site.balpyo.ai.entity.AIGenerateLogEntity;
import site.balpyo.script.entity.ScriptEntity;


import java.time.LocalDateTime;
import java.util.List;

@Getter
@Setter
@Entity
@Table(name = "guest")
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class GuestEntity {

    @Id
    private String uid;

    @CreationTimestamp
    private LocalDateTime createdAt;


}
package site.balpyo.guest.controller;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.dto.ErrorEnum;
import site.balpyo.common.util.CommonUtils;
import site.balpyo.guest.service.GuestService;

@RestController
@CrossOrigin
@RequiredArgsConstructor
@RequestMapping("/guest/manage")
public class GuestController {

    private final GuestService guestService;
    @PostMapping("/uid")
    public ResponseEntity<CommonResponse> generateUniqueIdentifier(){
        return guestService.generateUID();
    }

    @GetMapping("/uid")
    public ResponseEntity<CommonResponse> verifyUID(@RequestHeader(value = "UID", required = false) String uid){
        return guestService.verifyUID(uid);
    }

}
package site.balpyo.guest.service;

import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import site.balpyo.common.dto.CommonResponse;
import site.balpyo.common.util.GuestUtils;
import site.balpyo.guest.dto.UIDResponse;
import site.balpyo.guest.dto.VerifyResponse;
import site.balpyo.guest.entity.GuestEntity;
import site.balpyo.guest.repository.GuestRepository;

import java.util.UUID;

@Service
@RequiredArgsConstructor
public class GuestService {

    private final GuestRepository guestRepository;
    public ResponseEntity<CommonResponse> generateUID(){
        UUID uuid = UUID.randomUUID();
        String uuidString = uuid.toString();

        GuestEntity guestEntity = GuestEntity.builder()
                .uid(uuidString)
                .build();
        guestRepository.save(guestEntity);

        return CommonResponse.success(new UIDResponse(uuidString));
    }

    public ResponseEntity<CommonResponse> verifyUID(String uid) {
        boolean isVerified = GuestUtils.verifyUID(uid,guestRepository);

        return CommonResponse.success(new VerifyResponse(isVerified,uid));
    }
}
package site.balpyo.fcm.dto;


import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponseWrapper<T> {
    private T result;
    private int resultCode;
    private String resultMsg;
}package site.balpyo.fcm.dto;

import java.util.Map;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;

@Getter
@Builder
public class FcmMessageDTO {
    private boolean validateOnly;
    private Message message;

    @Builder
    @AllArgsConstructor
    @Getter
    public static class Message {
        private FcmMessageDTO.Notification notification;
        private String token;
        private Map<String, String> data;
    }

    @Builder
    @AllArgsConstructor
    @Getter
    public static class Notification {
        private String title;
        private String body;
        private String image;
    }
}package site.balpyo.fcm.dto;

import lombok.*;

/**
 * 모바일에서 전달받은 객체
 *
 * @author : dongheonlee
 * @fileName : FcmSendDTO
 * @since : 06/20/2024
 */
@Data
@AllArgsConstructor
@NoArgsConstructor(access = AccessLevel.PROTECTED)
public class FcmSendDTO {
    private String token;

    private String title;

    private String body;

    private String script_id;

}package site.balpyo.fcm;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

import java.io.IOException;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import site.balpyo.fcm.dto.ApiResponseWrapper;
import site.balpyo.fcm.dto.FcmSendDTO;
import site.balpyo.fcm.entity.SuccessCode;


@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/fcm")
public class FcmController {

    private final FcmServiceImpl fcmService;

    @PostMapping("/send")
    public ResponseEntity<ApiResponseWrapper<Object>> pushMessage(@RequestBody FcmSendDTO fcmSendDTO) {
        

        log.debug("[+] 푸시 메시지를 전송합니다. ");
        Mono<Integer> result;
        try {
            result = fcmService.sendMessageTo(fcmSendDTO);
            ApiResponseWrapper<Object> arw = ApiResponseWrapper
            .builder()
            .result(result)
            .resultCode(SuccessCode.SELECT_SUCCESS.getStatus())
            .resultMsg(SuccessCode.SELECT_SUCCESS.getMessage())
            .build();
            
            return new ResponseEntity<>(arw, HttpStatus.OK);

        } catch (IOException e) {
            log.error("[-] 푸시 메시지 전송에 실패했습니다. ");
            ApiResponseWrapper<Object> arw = ApiResponseWrapper
            .builder()
            .result(null)
            .resultCode(SuccessCode.SELECT_FAIL.getStatus())
            .resultMsg(SuccessCode.SELECT_FAIL.getMessage())
            .build();

            return new ResponseEntity<>(arw, HttpStatus.INTERNAL_SERVER_ERROR);
        } 

      
    }

}package site.balpyo.fcm.entity;


import lombok.Getter;

@Getter
public enum SuccessCode {
    SELECT_SUCCESS(200, "조회 성공"),
    SELECT_FAIL(400, "조회 실패");

    private final int status;
    private final String message;

    SuccessCode(int status, String message) {
        this.status = status;
        this.message = message;
    }

}
package site.balpyo.fcm;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.auth.oauth2.GoogleCredentials;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;

import site.balpyo.fcm.dto.FcmMessageDTO;
import site.balpyo.fcm.dto.FcmSendDTO;

import java.io.IOException;
import java.util.List;
import java.util.Map;

@Slf4j
@RequiredArgsConstructor
@Component
public class FcmServiceImpl implements FcmService {

    private final ObjectMapper objectMapper;

    private final WebClient.Builder webClientBuilder;

    String API_URL = "https://fcm.googleapis.com/v1/projects/balpyo-myeotbun/messages:send";

        
    @Override
    public Mono<Integer> sendMessageTo(FcmSendDTO fcmSendDTO) throws IOException {

        String message = makeMessage(fcmSendDTO);
        String accessToken;

        try {
            accessToken = getAccessToken();
            log.info("-------------------- Generated Access Token ");
        } catch (IOException e) {
            log.error("[-] 액세스 토큰을 가져오는 데 실패했습니다.", e);
            return Mono.error(e); // IOException 발생 시 Mono.error로 반환
        }
    
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(org.springframework.http.MediaType.APPLICATION_JSON);
        headers.set("Authorization", "Bearer " + getAccessToken());

        return webClientBuilder.build()
                .post()
                .uri(API_URL)
                .headers(httpHeaders -> {
                    httpHeaders.addAll(headers);
                })
                .bodyValue(message)
                .retrieve()
                .toBodilessEntity()
                .map(response -> response.getStatusCode().is2xxSuccessful() ? 1 : 0)
                .doOnError(e -> {
                    log.error("[-] FCM 메시지 전송에 실패했습니다.", e);
                });
    }


    private String makeMessage(FcmSendDTO fcmSendDTO) throws JsonParseException, JsonProcessingException {

        Map<String, String> data = Map.of("scriptId", fcmSendDTO.getScript_id());

        FcmMessageDTO fcmMessageDTO = FcmMessageDTO.builder()
                .message(FcmMessageDTO.Message.builder()
                        .token(fcmSendDTO.getToken())
                        .notification(FcmMessageDTO.Notification.builder()
                                .title(fcmSendDTO.getTitle())
                                .body(fcmSendDTO.getBody())
                                .image(null)
                                .build()
                        )
                        .data(data) // scriptId 추가
                        .build()).validateOnly(false).build();

        log.info("-------------------- Created Firebase Notification Message");
        // log.info("-------------------- ", fcmMessageDTO.toString());

        return objectMapper.writeValueAsString(fcmMessageDTO);
    }

    private String getAccessToken() throws IOException {
        String firebaseConfigPath = "firebase/balpyo-myeotbun-firebase-adminsdk-7vz0s-bc87366e4d.json";

        GoogleCredentials googleCredentials = GoogleCredentials
                .fromStream(new ClassPathResource(firebaseConfigPath).getInputStream())
                .createScoped(List.of("https://www.googleapis.com/auth/cloud-platform"));

        googleCredentials.refreshIfExpired();
        return googleCredentials.getAccessToken().getTokenValue();
    }
}package site.balpyo.fcm;

import java.io.IOException;

import org.springframework.stereotype.Service;

import reactor.core.publisher.Mono;
import site.balpyo.fcm.dto.FcmSendDTO;

@Service
public interface FcmService {

    Mono<Integer> sendMessageTo(FcmSendDTO fcmSendDTO) throws IOException;
    
}
package site.balpyo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@SpringBootApplication
@EnableJpaAuditing
public class BalpyoHelperApplication {
	static {
		System.setProperty("com.amazonaws.sdk.disableEc2Metadata", "true");
	} //  spring-cloud-starter-aws 의존성 주입시, 로컬 환경은 aws 환경이 아니라서 발생하는 에러 없애기

	public static void main(String[] args) {
		SpringApplication.run(BalpyoHelperApplication.class, args);
	}

}
